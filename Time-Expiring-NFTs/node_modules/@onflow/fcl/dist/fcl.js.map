{"version":3,"file":"fcl.js","sources":["../src/VERSION.js","../src/config-utils.js","../src/default-config.js","../src/exec/utils/is.js","../src/exec/utils/normalize-args.js","../src/exec/query.js","../src/current-user/fetch-services.js","../src/current-user/merge-services.js","../src/current-user/normalize/__vsn.js","../src/current-user/normalize/authn.js","../src/current-user/normalize/authz.js","../src/current-user/normalize/pre-authz.js","../src/current-user/normalize/frame.js","../src/current-user/normalize/back-channel-rpc.js","../src/current-user/normalize/open-id.js","../src/current-user/normalize/user-signature.js","../src/current-user/normalize/local-view.js","../src/current-user/normalize/account-proof.js","../src/current-user/normalize/authn-refresh.js","../src/current-user/normalize/service.js","../src/current-user/build-user.js","../src/current-user/service-of-type.js","../src/current-user/exec-service/strategies/utils/service-endpoint.js","../src/current-user/exec-service/strategies/utils/fetch-service.js","../src/current-user/normalize/polling-response.js","../src/current-user/exec-service/strategies/utils/poll.js","../src/current-user/exec-service/strategies/utils/render-frame.js","../src/current-user/exec-service/strategies/utils/render-pop.js","../src/current-user/exec-service/strategies/utils/render-tab.js","../src/current-user/exec-service/exec-local.js","../src/current-user/exec-service/strategies/http-post.js","../src/current-user/exec-service/strategies/utils/buildMessageHandler.js","../src/current-user/exec-service/strategies/utils/frame.js","../src/current-user/exec-service/strategies/iframe-rpc.js","../src/current-user/exec-service/strategies/utils/pop.js","../src/current-user/exec-service/strategies/pop-rpc.js","../src/current-user/exec-service/strategies/utils/tab.js","../src/current-user/exec-service/strategies/tab-rpc.js","../src/current-user/exec-service/strategies/utils/extension.js","../src/current-user/exec-service/strategies/ext-rpc.js","../src/current-user/exec-service/index.js","../src/current-user/normalize/composite-signature.js","../src/current-user/index.js","../src/transaction/index.js","../src/exec/mutate.js","../src/wallet-utils/on-message-from-fcl.js","../src/wallet-utils/send-msg-to-fcl.js","../src/wallet-utils/CompositeSignature.js","../src/wallet-utils/encode-account-proof.js","../src/wallet-utils/inject-ext-service.js","../src/app-utils/verify-signatures.js","../src/exec/verify.js","../src/serialize/index.js","../src/events/index.js","../src/discovery/services.js","../src/discovery/services/authn.js","../src/discovery/index.js","../src/fcl.js"],"sourcesContent":["export const VERSION = PACKAGE_CURRENT_VERSION || \"TESTVERSION\"\n","import {config} from \"@onflow/config\"\nimport {VERSION} from \"./VERSION\"\n\nconst isServerSide = () => typeof window === \"undefined\"\n\nconst SESSION_STORAGE = {\n  can: !isServerSide(),\n  get: async key => JSON.parse(sessionStorage.getItem(key)),\n  put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value)),\n}\n\nconst LOCAL_STORAGE = {\n  can: !isServerSide(),\n  get: async key => JSON.parse(localStorage.getItem(key)),\n  put: async (key, value) => localStorage.setItem(key, JSON.stringify(value)),\n}\n\nconst NO_STORAGE = {\n  can: false,\n}\n\nexport const STORAGE_DEFAULT = SESSION_STORAGE\nexport const DISCOVERY_METHOD = \"IFRAME/RPC\"\n\nexport async function configLens(regex) {\n  return Object.fromEntries(\n    Object.entries(await config().where(regex)).map(([key, value]) => [\n      key.replace(regex, \"\"),\n      value,\n    ])\n  )\n}\n\nexport async function getDiscoveryService() {\n  const discoveryWallet = await config.first([\n    \"discovery.wallet\",\n    \"challenge.handshake\",\n  ])\n\n  const discoveryAuthnInclude = await config.get(\"discovery.authn.include\", [])\n\n  const discoveryWalletMethod = await config.first([\n    \"discovery.wallet.method\",\n    \"discovery.wallet.method.default\",\n  ])\n\n  return {\n    type: \"authn\",\n    endpoint: discoveryWallet,\n    method: discoveryWalletMethod,\n    discoveryAuthnInclude,\n  }\n}\n","import {config} from \"@onflow/config\"\nimport {DISCOVERY_METHOD, STORAGE_DEFAULT} from \"./config-utils\"\n\nconfig({\n  \"discovery.wallet.method.default\": DISCOVERY_METHOD,\n  \"fcl.storage.default\": STORAGE_DEFAULT,\n})\n","const is = type => d => typeof d === type\n\nexport const isRequired = d => d != null\nexport const isObject = is(\"object\")\nexport const isString = is(\"string\")\nexport const isFunc = is(\"function\")\nexport const isNumber = is(\"number\")\n","import {isFunc} from \"./is\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\n\nexport function normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(sdk.arg, t)\n  return []\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\nimport {isRequired, isObject, isString, isFunc} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\n\n/** Query the Flow Blockchain\n *\n *  @arg {Object} opts         - Query Options and configuration\n *  @arg {string} opts.cadence - Cadence Script used to query Flow\n *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script\n *  @arg {number} opts.limit   - Compute Limit for Query\n *  @returns {Promise<Response>}\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nexport async function query(opts = {}) {\n  await preQuery(opts)\n\n  // prettier-ignore\n  return sdk.send([\n    sdk.script(opts.cadence),\n    sdk.args(normalizeArgs(opts.args || [])),\n    opts.limit && typeof opts.limit === \"number\" && sdk.limit(opts.limit)\n  ]).then(sdk.decode)\n}\n\nasync function preQuery(opts) {\n  invariant(\n    isRequired(opts.cadence),\n    \"query({ cadence }) -- cadence is required\"\n  )\n\n  invariant(\n    isString(opts.cadence),\n    \"query({ cadence }) -- cadence must be a string\"\n  )\n\n  invariant(\n    await sdk.config.get(\"accessNode.api\"),\n    `Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`\n  )\n}\n","export async function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return []\n\n  const url = new URL(servicesURL)\n  url.searchParams.append(\"code\", code)\n\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then(d => d.json())\n\n  if (Array.isArray(resp)) return resp\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = []\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service,\n      })\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider,\n    })\n  }\n\n  return services\n}\n","import {withPrefix} from \"@onflow/util-address\"\n\nexport function mergeServices(sx1 = [], sx2 = []) {\n  // TODO: Make this smarter\n  return [...sx1, ...sx2]\n}\n","export const SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const PROVIDER_PRAGMA = {\n  f_type: \"Provider\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const OPEN_ID_PRAGMA = {\n  f_type: \"OpenId\",\n  f_vsn: \"1.0.0\",\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nexport function normalizeAuthn(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: withPrefix(service.addr),\n          name: service.name,\n          icon: service.icon,\n        },\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizePreAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nexport function normalizeFrame(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nexport function normalizeBackChannelRpc(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA, OPEN_ID_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nexport function normalizeOpenId(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return null\n  }\n}\n","// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeUserSignature(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid user-signature service\")\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    type: \"local-view\",\n//    method: \"VIEW/IFRAME\",\n//    endpoint: \"https://woot.org/authz/local\",\n//    data: {},\n//    params: {},\n// }\nexport function normalizeLocalView(resp) {\n  if (resp == null) return null\n  if (resp.method == null) {\n    resp = {...resp, type: \"local-view\", method: \"VIEW/IFRAME\"}\n  }\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: resp.type || \"local-view\",\n        method: resp.method,\n        endpoint: resp.endpoint,\n        data: resp.data || {},\n        params: resp.params || {},\n      }\n  }\n}\n","// {\n//   \"f_type\": \"Service\",                    // Its a service!\n//   \"f_vsn\": \"1.0.0\",                       // Follows the v1.0.0 spec for the service\n//   \"type\": \"account-proof\",                // the type of service it is\n//   \"method\": \"DATA\",                       // Its data!\n//   \"uid\": \"awesome-wallet#account-proof\",  // A unique identifier for the service\n//   \"data\": {\n//     \"f_type\": \"account-proof\",\n//     \"f_vsn\": \"1.0.0\",\n//     \"nonce\": \"0A1BC2FF\",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)\n//     \"address\": \"0xUSER\",                  // The user's address (8 bytes, i.e 16 hex characters)\n//     \"signature\": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)\n// }\n\nexport function normalizeAccountProof(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(`FCL Normalizer Error: Invalid account-proof service`)\n  }\n}\n","// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn-refresh\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\",  // \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthnRefresh(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid authn-refresh service\")\n  }\n}\n","import {normalizeAuthn} from \"./authn\"\nimport {normalizeAuthz} from \"./authz\"\nimport {normalizePreAuthz} from \"./pre-authz\"\nimport {normalizeFrame} from \"./frame\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeOpenId} from \"./open-id\"\nimport {normalizeUserSignature} from \"./user-signature\"\nimport {normalizeLocalView} from \"./local-view\"\nimport {normalizeAccountProof} from \"./account-proof\"\nimport {normalizeAuthnRefresh} from \"./authn-refresh\"\n\nexport function normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data))\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n  \"local-view\": normalizeLocalView,\n  \"account-proof\": normalizeAccountProof,\n  \"authn-refresh\": normalizeAuthnRefresh,\n}\n\nexport function normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data)\n    return normalized\n  } catch (error) {\n    console.error(\n      `Unrecognized FCL Service Type [${service.type}]`,\n      service,\n      error\n    )\n    return service\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport * as rlp from \"@onflow/rlp\"\nimport {fetchServices} from \"./fetch-services\"\nimport {mergeServices} from \"./merge-services\"\nimport {USER_PRAGMA} from \"./normalize/__vsn\"\nimport {normalizeService} from \"./normalize/service\"\n\nfunction deriveCompositeId(authn) {\n  return rlp\n    .encode([\n      authn.provider.address || authn.provider.name || \"UNSPECIFIED\",\n      authn.id,\n    ])\n    .toString(\"hex\")\n}\n\nfunction normalizeData(data) {\n  data.addr = data.addr ? withPrefix(data.addr) : null\n  data.paddr = data.paddr ? withPrefix(data.paddr) : null\n  return data\n}\n\nfunction findService(type, services) {\n  return services.find(d => d.type === type)\n}\n\nexport async function buildUser(data) {\n  data = normalizeData(data)\n\n  var services = mergeServices(\n    data.services || [],\n    await fetchServices(data.hks, data.code)\n  ).map(service => normalizeService(service, data))\n\n  const authn = findService(\"authn\", services)\n\n  return {\n    ...USER_PRAGMA,\n    addr: withPrefix(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.expires,\n  }\n}\n","export function serviceOfType(services = [], type) {\n  return services.find(service => service.type === type)\n}\n","export function serviceEndpoint(service) {\n  const url = new URL(service.endpoint)\n  url.searchParams.append(\"l6n\", window.location.origin)\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value)\n    }\n  }\n  return url\n}\n","import {serviceEndpoint} from \"./service-endpoint\"\n\nexport function fetchService(service, opts = {}) {\n  const method = opts.method || \"POST\"\n  const body =\n    method === \"GET\"\n      ? undefined\n      : JSON.stringify(opts.data || service.data || {})\n\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\",\n    },\n    body: body,\n  }).then(d => d.json())\n}\n","import {POLLING_RESPONSE_PRAGMA} from \"./__vsn\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeFrame} from \"./frame\"\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED | REDIRECT\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nexport function normalizePollingResponse(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status ?? \"APPROVED\",\n        reason: resp.reason ?? null,\n        data: resp.compositeSignature || resp.data || {...resp} || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0]),\n      }\n  }\n}\n","import {normalizePollingResponse} from \"../../../normalize/polling-response\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {fetchService} from \"./fetch-service\"\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\",\n}\n\nconst serviceMethod = service => {\n  invariant(\n    OPTIONS[service.method],\n    \"Invalid Service Method for type back-channel-rpc\",\n    {service}\n  )\n  return OPTIONS[service.method]\n}\n\nconst serviceBody = service => {\n  if (service.method === \"HTTP/GET\") return undefined\n  if (service.method === \"HTTP/POST\" && service.data != null)\n    return JSON.stringify(service.data)\n  return undefined\n}\n\nexport async function poll(service, canContinue = () => true) {\n  invariant(service, \"Missing Polling Service\", {service})\n  if (!canContinue()) throw new Error(\"Externally Halted\")\n\n  const resp = await fetchService(service, {\n    method: serviceMethod(service),\n  }).then(normalizePollingResponse)\n\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n    default:\n      await new Promise(r => setTimeout(r, 500))\n      return poll(resp.updates, canContinue)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *; hid *\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame.contentWindow, unmount]\n}\n","const POP = \"FCL_POP\"\n\nlet popup = null\nlet previousUrl = null\n\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2\n  const popup = win.open(\n    url,\n    windowName,\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`\n  )\n  if (!popup)\n    throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\")\n  return popup\n}\n\nexport function renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770)\n  } else if (previousUrl !== src) {\n    popup.location.replace(src)\n    popup.focus()\n  } else {\n    popup.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close()\n    }\n    popup = null\n  }\n\n  return [popup, unmount]\n}\n","const TAB = \"FCL_TAB\"\n\nlet tab = null\nlet previousUrl = null\n\nexport function renderTab(src) {\n  if (tab == null || tab?.closed) {\n    tab = window.open(src, \"_blank\")\n    if (!tab)\n      throw new Error(\"Tab failed to open (was it blocked by the browser?)\")\n  } else if (previousUrl !== src) {\n    tab.location.replace(src)\n    tab.focus()\n  } else {\n    tab.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (tab && !tab.closed) {\n      tab.close()\n    }\n    tab = null\n  }\n\n  return [tab, unmount]\n}\n","import {renderFrame} from \"./strategies/utils/render-frame\"\nimport {renderPop} from \"./strategies/utils/render-pop\"\nimport {renderTab} from \"./strategies/utils/render-tab\"\nimport {serviceEndpoint} from \"./strategies/utils/service-endpoint\"\n\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n}\n\nexport async function execLocal(service, opts = {}) {\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts)\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {service, opts})\n    throw error\n  }\n}\n","import {fetchService} from \"./utils/fetch-service\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {normalizeLocalView} from \"../../normalize/local-view\"\nimport {poll} from \"./utils/poll\"\nimport {execLocal} from \"../exec-local\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport async function execHttpPost(service, signable, opts, config) {\n  const resp = await fetchService(service, {\n    data: {\n      fclVersion: VERSION,\n      service: {\n        params: service.params,\n        data: service.data,\n        type: service.type,\n      },\n      config,\n      ...signable,\n    },\n  }).then(normalizePollingResponse)\n\n  if (resp.status === \"APPROVED\") {\n    return resp.data\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n  } else if (resp.status === \"REDIRECT\") {\n    return resp\n  } else if (resp.status === \"PENDING\") {\n    var canContinue = true\n    const [_, unmount] = await execLocal(normalizeLocalView(resp.local))\n\n    const close = () => {\n      try {\n        unmount()\n        canContinue = false\n      } catch (error) {\n        console.error(\"Frame Close Error\", error)\n      }\n    }\n\n    return poll(resp.updates, () => canContinue)\n      .then(serviceResponse => {\n        close()\n        return serviceResponse\n      })\n      .catch(error => {\n        console.error(error)\n        close()\n        throw error\n      })\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {service, resp})\n    throw new Error(`Auto Decline: Invalid Response`)\n  }\n}\n","const CLOSE_EVENT = \"FCL:VIEW:CLOSE\"\nconst READY_EVENT = \"FCL:VIEW:READY\"\nconst RESPONSE_EVENT = \"FCL:VIEW:RESPONSE\"\n\nconst _ = e => typeof e === \"string\" && e.toLowerCase()\n\nconst IGNORE = new Set([\n  \"monetizationstart\",\n  \"monetizationpending\",\n  \"monetizationprogress\",\n  \"monetizationstop\",\n])\n\nconst deprecate = (was, want) =>\n  console.warn(\n    \"DEPRECATION NOTICE\",\n    `Received ${was}, please use ${want} for this and future versions of FCL`\n  )\n\nexport const buildMessageHandler =\n  ({close, send, onReady, onResponse, onMessage}) =>\n  e => {\n    try {\n      if (typeof e.data !== \"object\") return\n      if (IGNORE.has(e.data.type)) return\n      if (_(e.data.type) === _(CLOSE_EVENT)) close()\n      if (_(e.data.type) === _(READY_EVENT)) onReady(e, {send, close})\n      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {send, close})\n      onMessage(e, {send, close})\n\n      // Backwards Compatible\n      if (_(e.data.type) === _(\"FCL:FRAME:READY\")) {\n        deprecate(e.data.type, READY_EVENT)\n        onReady(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT)\n        onResponse(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:CLOSE\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n      //\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT)\n        onResponse(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL::AUTHZ_READY\")) {\n        deprecate(e.data.type, READY_EVENT)\n        onReady(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n      if (_(e.data.type) === _(\"FCL::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error)\n      close()\n    }\n  }\n","import {renderFrame} from \"./render-frame\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execIframeRPC(service, body, opts, config) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall\n\n    frame(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message:\n                  \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n              },\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {renderPop} from \"./render-pop\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function pop(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$pop, unmount] = renderPop(serviceEndpoint(service))\n\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Popup Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {pop} from \"./utils/pop\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execPopRPC(service, body, opts, config) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    pop(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {renderTab} from \"./render-tab\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function tab(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$tab, unmount] = renderTab(serviceEndpoint(service))\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Tab Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {tab} from \"./utils/tab\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execTabRPC(service, body, opts, config) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    tab(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function extension(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  send({service})\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      onClose()\n    } catch (error) {\n      console.error(\"Ext Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error)\n    }\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {extension} from \"./utils/extension\"\nimport {normalizePollingResponse} from \"../../normalize/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execExtRPC(service, body, opts, config) {\n  return new Promise((resolve, reject) => {\n    extension(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {execHttpPost} from \"./strategies/http-post\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\nimport {execPopRPC} from \"./strategies/pop-rpc\"\nimport {execTabRPC} from \"./strategies/tab-rpc\"\nimport {execExtRPC} from \"./strategies/ext-rpc\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {configLens} from \"../../config-utils\"\nimport {VERSION} from \"../../VERSION\"\n\nconst STRATEGIES = {\n  \"HTTP/RPC\": execHttpPost,\n  \"HTTP/POST\": execHttpPost,\n  \"IFRAME/RPC\": execIframeRPC,\n  \"POP/RPC\": execPopRPC,\n  \"TAB/RPC\": execTabRPC,\n  \"EXT/RPC\": execExtRPC,\n}\n\nexport async function execService({service, msg = {}, opts = {}, config = {}}) {\n  msg.data = service.data\n  const fullConfig = {\n    ...config,\n    services: await configLens(/^service\\./),\n    app: await configLens(/^app\\.detail\\./),\n    client: {\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      extensions: window?.fcl_extensions || [],\n    },\n  }\n\n  try {\n    const res = await STRATEGIES[service.method](service, msg, opts, fullConfig)\n    if (res.status === \"REDIRECT\") {\n      invariant(\n        service.type === res.data.type,\n        \"Cannot shift recursive service type in execService\"\n      )\n      return await execService({\n        service: res.data,\n        msg,\n        opts,\n        config: fullConfig,\n      })\n    } else {\n      return res\n    }\n  } catch (error) {\n    console.error(\n      \"execService({service, msg = {}, opts = {}, config = {}})\",\n      error,\n      {\n        service,\n        msg,\n        opts,\n        config,\n      }\n    )\n    throw error\n  }\n}\n","import {COMPOSITE_SIGNATURE_PRAGMA} from \"./__vsn\"\nimport {sansPrefix} from \"@onflow/util-address\"\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nexport function normalizeCompositeSignature(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: sansPrefix(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId,\n      }\n  }\n}\n","import \"../default-config\"\nimport * as t from \"@onflow/types\"\nimport {account, arg} from \"@onflow/sdk\"\nimport {config} from \"@onflow/config\"\nimport {spawn, send, INIT, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {withPrefix, sansPrefix} from \"@onflow/util-address\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {buildUser} from \"./build-user\"\nimport {serviceOfType} from \"./service-of-type\"\nimport {execService} from \"./exec-service\"\nimport {normalizeCompositeSignature} from \"./normalize/composite-signature\"\nimport {getDiscoveryService} from \"../config-utils\"\n\nexport const isFn = d => typeof d === \"function\"\n\nconst NAME = \"CURRENT_USER\"\nconst UPDATED = \"CURRENT_USER/UPDATED\"\nconst SNAPSHOT = \"SNAPSHOT\"\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\"\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\"\n\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`\n\nconst getStoredUser = async storage => {\n  const fallback = JSON.parse(DATA)\n  const stored = await storage.get(NAME)\n  if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n    storage.removeItem(NAME)\n    return fallback\n  }\n  return stored || fallback\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    if (typeof window === \"undefined\") {\n      console.warn(\n        `\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        `,\n        \"font-weight:bold;font-family:monospace;\"\n      )\n    }\n\n    ctx.merge(JSON.parse(DATA))\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"])\n    if (storage.can) {\n      const user = await getStoredUser(storage)\n      if (notExpired(user)) ctx.merge(user)\n    }\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data)\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"])\n    if (storage.can) storage.put(NAME, ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA))\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"])\n    if (storage.can) storage.put(NAME, ctx.all())\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n}\n\nconst spawnCurrentUser = () => spawn(HANDLERS, NAME)\n\nfunction notExpired(user) {\n  return (\n    user.expiresAt == null ||\n    user.expiresAt === 0 ||\n    user.expiresAt > Date.now()\n  )\n}\n\nasync function getAccountProofData() {\n  let accountProofDataResolver = await config.get(\"fcl.accountProof.resolver\")\n\n  if (!isFn(accountProofDataResolver)) return\n\n  const accountProofData = await accountProofDataResolver()\n\n  if (accountProofData == null) return\n\n  invariant(\n    typeof accountProofData.appIdentifier === \"string\",\n    \"appIdentifier must be a string\"\n  )\n  invariant(\n    /^[0-9a-f]+$/i.test(accountProofData.nonce),\n    \"Nonce must be a hex string\"\n  )\n\n  return accountProofData\n}\n\n// Certain method types cannot be overridden to use other methods like POP/RCP\nconst isServiceMethodUnchangable = method => [\"EXT/RPC\"].includes(method)\n\nasync function authenticate({service, redir = false} = {}) {\n  if (service && !service?.provider?.is_installed && service?.provider?.requires_install) {\n    window.location.href = service?.provider?.install_link\n    return\n  }\n\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser()\n    const opts = {redir}\n    const user = await snapshot()\n    const discoveryService = await getDiscoveryService()\n    const refreshService = serviceOfType(user.services, \"authn-refresh\")\n    let accountProofData\n\n    try {\n      accountProofData = await getAccountProofData()\n    } catch (error) {\n      console.error(\n        `Error During Authentication: Could not resolve account proof data.\n        ${error}`\n      )\n      return reject(error)\n    }\n\n    invariant(\n      service || discoveryService.endpoint,\n      `\n        If no service passed to \"authenticate,\" then \"discovery.wallet\" must be defined in config.\n        See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n      `\n    )\n\n    if (user.loggedIn) {\n      if (refreshService) {\n        try {\n          const response = await execService({\n            service: refreshService,\n            msg: accountProofData,\n            opts,\n          })\n          send(NAME, SET_CURRENT_USER, await buildUser(response))\n        } catch (e) {\n          console.error(\"Error: Could not refresh authentication.\", e)\n        } finally {\n          return resolve(await snapshot())\n        }\n      } else {\n        return resolve(user)\n      }\n    }\n\n    try {\n      const response = await execService({\n        service: {\n          ...(service || discoveryService),\n          method: isServiceMethodUnchangable(service?.method)\n            ? service.method \n            : discoveryService?.method || service.method || \"IFRAME/RPC\",\n        },\n        msg: accountProofData,\n        opts,\n        config: {\n          discoveryAuthnInclude: discoveryService.discoveryAuthnInclude,\n        },\n      })\n      send(NAME, SET_CURRENT_USER, await buildUser(response))\n    } catch (e) {\n      console.error(\"Error while authenticating\", e)\n    } finally {\n      resolve(await snapshot())\n    }\n  })\n}\n\nfunction unauthenticate() {\n  spawnCurrentUser()\n  send(NAME, DEL_CURRENT_USER)\n}\n\nconst normalizePreAuthzResponse = authz => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || [],\n})\n\nfunction resolvePreAuthz(authz) {\n  const resp = normalizePreAuthzResponse(authz)\n  const axs = []\n\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer])\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az])\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az])\n\n  var result = axs.map(([role, az]) => ({\n    tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n    addr: az.identity.address,\n    keyId: az.identity.keyId,\n    signingFunction(signable) {\n      return execService({service: az, msg: signable})\n    },\n    role: {\n      proposer: role === \"PROPOSER\",\n      payer: role === \"PAYER\",\n      authorizer: role === \"AUTHORIZER\",\n    },\n  }))\n  return result\n}\n\nasync function authorization(account) {\n  spawnCurrentUser()\n\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    async resolve(account, preSignable) {\n      const user = await authenticate({redir: true})\n      const authz = serviceOfType(user.services, \"authz\")\n      const preAuthz = serviceOfType(user.services, \"pre-authz\")\n\n      if (preAuthz)\n        return resolvePreAuthz(\n          await execService({\n            service: preAuthz,\n            msg: preSignable,\n          })\n        )\n      if (authz)\n        return {\n          ...account,\n          tempId: \"CURRENT_USER\",\n          resolve: null,\n          addr: sansPrefix(authz.identity.address),\n          keyId: authz.identity.keyId,\n          sequenceNum: null,\n          signature: null,\n          async signingFunction(signable) {\n            return normalizeCompositeSignature(\n              await execService({\n                service: authz,\n                msg: signable,\n                opts: {\n                  includeOlderJsonRpcCall: true,\n                },\n              })\n            )\n          },\n        }\n      throw new Error(\n        \"No Authz or PreAuthz Service configured for CURRENT_USER\"\n      )\n    },\n  }\n}\n\nfunction subscribe(callback) {\n  spawnCurrentUser()\n  const EXIT = \"@EXIT\"\n  const self = spawn(async ctx => {\n    ctx.send(NAME, SUBSCRIBE)\n    while (1) {\n      const letter = await ctx.receive()\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, UNSUBSCRIBE)\n        return\n      }\n      callback(letter.data)\n    }\n  })\n  return () => send(self, EXIT)\n}\n\nfunction snapshot() {\n  spawnCurrentUser()\n  return send(NAME, SNAPSHOT, null, {expectReply: true, timeout: 0})\n}\n\nasync function info() {\n  spawnCurrentUser()\n  const {addr} = await snapshot()\n  if (addr == null) throw new Error(\"No Flow Address for Current User\")\n  return account(addr)\n}\n\nasync function resolveArgument() {\n  const {addr} = await authenticate()\n  return arg(withPrefix(addr), t.Address)\n}\n\nconst makeSignable = msg => {\n  invariant(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\")\n\n  return {\n    message: msg,\n  }\n}\n\nasync function signUserMessage(msg) {\n  spawnCurrentUser()\n  const user = await authenticate({redir: true})\n\n  const signingService = serviceOfType(user.services, \"user-signature\")\n\n  invariant(\n    signingService,\n    \"Current user must have authorized a signing service.\"\n  )\n\n  try {\n    const response = await execService({\n      service: signingService,\n      msg: makeSignable(msg),\n    })\n    if (Array.isArray(response)) {\n      return response.map(compSigs => normalizeCompositeSignature(compSigs))\n    } else {\n      return [normalizeCompositeSignature(response)]\n    }\n  } catch (error) {\n    return error\n  }\n}\n\nlet currentUser = () => {\n  return {\n    authenticate,\n    unauthenticate,\n    authorization,\n    signUserMessage,\n    subscribe,\n    snapshot,\n    resolveArgument,\n  }\n}\n\ncurrentUser.authenticate = authenticate\ncurrentUser.unauthenticate = unauthenticate\ncurrentUser.authorization = authorization\ncurrentUser.signUserMessage = signUserMessage\ncurrentUser.subscribe = subscribe\ncurrentUser.snapshot = snapshot\ncurrentUser.resolveArgument = resolveArgument\n\nexport {currentUser}\n","import \"../default-config\"\nimport {\n  spawn,\n  send,\n  subscriber,\n  snapshoter,\n  UPDATED,\n  SNAPSHOT,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  ERROR,\n} from \"@onflow/util-actor\"\nimport {send as fclSend, decode, getTransactionStatus} from \"@onflow/sdk\"\n\nconst RATE = 2500\nconst POLL = \"POLL\"\n\nconst fetchTxStatus = async transactionId => {\n  return fclSend([getTransactionStatus(transactionId)]).then(decode)\n}\n\nconst isExpired = tx => tx.status === 5\nconst isSealed = tx => tx.status >= 4\nconst isExecuted = tx => tx.status >= 3\nconst isFinalized = tx => tx.status >= 2\nconst isPending = tx => tx.status >= 1\nconst isUnknown = tx => tx.status >= 0\n\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    ctx.sendSelf(POLL)\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, ctx.all())\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all())\n  },\n  [POLL]: async ctx => {\n    let tx\n    try {\n      tx = await fetchTxStatus(ctx.self())\n    } catch (e) {\n      return ctx.fatalError(e)\n    }\n\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(UPDATED, tx)\n    ctx.merge(tx)\n  },\n}\n\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\")\n    transactionId = transactionId.transactionId\n  if (transactionId == null) throw new Error(\"transactionId required\")\n  return transactionId\n}\n\nconst spawnTransaction = transactionId => {\n  return spawn(HANDLERS, scoped(transactionId))\n}\n\nexport function transaction(transactionId) {\n  function snapshot() {\n    return snapshoter(transactionId, spawnTransaction)\n  }\n\n  function subscribe(callback) {\n    return subscriber(scoped(transactionId), spawnTransaction, callback)\n  }\n\n  function once(predicate) {\n    return function innerOnce(opts = {}) {\n      const suppress = opts.suppress || false\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus, error) => {\n          if ((error || txStatus.statusCode) && !suppress) {\n            reject(error || txStatus.errorMessage)\n            unsub()\n          } else if (predicate(txStatus)) {\n            resolve(txStatus)\n            unsub()\n          }\n        })\n      })\n    }\n  }\n\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed),\n  }\n}\n\ntransaction.isUnknown = isUnknown\ntransaction.isPending = isPending\ntransaction.isFinalized = isFinalized\ntransaction.isExecuted = isExecuted\ntransaction.isSealed = isSealed\ntransaction.isExpired = isExpired\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString, isFunc, isNumber} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\nimport {currentUser} from \"../current-user\"\nimport {transaction} from \"../transaction\"\n\n/** As the current user Mutate the Flow Blockchain\n *\n *  @arg {Object} opts - Mutation Options and configuration\n *  @arg {string} opts.cadence - Cadence Transaction used to mutate Flow\n *  @arg {ArgsFn} opts.args - Arguments passed to cadence transaction\n *  @arg {number} opts.limit - Compute Limit for transaction\n *  @returns {string} Transaction Id\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    fcl.mutate({\n *      cadence: `\n *        transaction(a: Int, b: Int, c: Address) {\n *          prepare(acct: AuthAccount) {\n *            log(acct)\n *            log(a)\n *            log(b)\n *            log(c)\n *          }\n *        }\n *      `,\n *      args: (arg, t) => [\n *        arg(6, t.Int),\n *        arg(7, t.Int),\n *        arg(\"0xba1132bc08f82fe2\", t.Address),\n *      ],\n *    })\n *\n *\n *  Options:\n *    type Options = {\n *      cadence: String!,\n *      args: (arg, t) => Array<Arg>,\n *      limit: Number,\n *      authz: AuthzFn, // will overload the trinity of signatory roles\n *      proposer: AuthzFn, // will overload the proposer signatory role\n *      payer: AuthzFn, // will overload the payer signatory role\n *      authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n *    }\n */\n\nconst noop = () => {}\n\nexport async function mutate(opts = {}) {\n  var txid\n  try {\n    await prepMutation(opts)\n\n    // Allow for a config to overwrite the authorization function.\n    // prettier-ignore\n    const authz = await sdk.config().get(\"fcl.authz\", currentUser().authorization)\n\n    // prettier-ignore\n    txid = sdk.send([\n      sdk.transaction(opts.cadence),\n\n      sdk.args(normalizeArgs(opts.args || [])),\n\n      opts.limit && isNumber(opts.limit) && sdk.limit(opts.limit),\n\n      // opts.proposer > opts.authz > authz\n      sdk.proposer(opts.proposer || opts.authz || authz),\n\n      // opts.payer > opts.authz > authz\n      sdk.payer(opts.payer || opts.authz || authz),\n\n      // opts.authorizations > [opts.authz > authz]\n      sdk.authorizations(opts.authorizations || [opts.authz || authz]),\n    ]).then(sdk.decode)\n\n    return txid\n  } catch (error) {\n    throw error\n  }\n}\n\nasync function prepMutation(opts) {\n  // prettier-ignore\n  invariant(isRequired(opts), \"mutate(opts) -- opts is required\")\n  // prettier-ignore\n  invariant(isObject(opts), \"mutate(opts) -- opts must be an object\")\n  // prettier-ignore\n  invariant(isRequired(opts.cadence), \"mutate({ cadence }) -- cadence is required\")\n  // prettier-ignore\n  invariant(isString(opts.cadence), \"mutate({ cadence }) -- cadence must be a string\")\n  // prettier-ignore\n  invariant(\n    await sdk.config.get(\"accessNode.api\"),\n    `Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`\n  )\n}\n","export const onMessageFromFCL = (messageType, cb = () => {}) => {\n  const buildData = data => {\n    if (data.deprecated)\n      console.warn(\"DEPRECATION NOTICE\", data.deprecated.message)\n    delete data?.body?.interaction\n\n    return data\n  }\n\n  const internal = e => {\n    const {data} = e\n    if (typeof data !== \"object\") return\n    if (typeof data == null) return\n    if (data.type !== messageType) return\n\n    cb(buildData(data))\n  }\n\n  window.addEventListener(\"message\", internal)\n  return () => window.removeEventListener(\"message\", internal)\n}\n","import {onMessageFromFCL} from \"./on-message-from-fcl\"\n\nexport const sendMsgToFCL = (type, msg = {}) => {\n  if (window.location !== window.parent.location) {\n    window.parent.postMessage({...msg, type}, \"*\")\n  } else if (window.opener) {\n    window.opener.postMessage({...msg, type}, \"*\")\n  } else {\n    throw new Error(\"Unable to communicate with parent FCL instance\")\n  }\n}\n\nexport const ready = (cb, msg = {}) => {\n  onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", cb)\n  sendMsgToFCL(\"FCL:VIEW:READY\")\n}\n\nexport const close = () => {\n  sendMsgToFCL(\"FCL:VIEW:CLOSE\")\n}\n\nexport const approve = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"APPROVED\",\n    reason: null,\n    data: data,\n  })\n}\n\nexport const decline = reason => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"DECLINED\",\n    reason: reason,\n    data: null,\n  })\n}\n\nexport const redirect = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"REDIRECT\",\n    reason: null,\n    data: data,\n  })\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {COMPOSITE_SIGNATURE_PRAGMA} from \"../current-user/normalize/__vsn\"\n\nexport function CompositeSignature(addr, keyId, signature) {\n  this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type\n  this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn\n  this.addr = withPrefix(addr)\n  this.keyId = Number(keyId)\n  this.signature = signature\n}\n","import {sansPrefix} from \"@onflow/util-address\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {Buffer, encode as rlpEncode} from \"@onflow/rlp\"\n\nconst rightPaddedHexBuffer = (value, pad) =>\n  Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\")\n\nconst leftPaddedHexBuffer = (value, pad) =>\n  Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\")\n\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8)\n\nconst nonceBuffer = nonce => Buffer.from(nonce, \"hex\")\n\nexport const encodeAccountProof = (\n  {address, nonce, appIdentifier},\n  includeDomainTag = true\n) => {\n  invariant(\n    address,\n    \"Encode Message For Provable Authn Error: address must be defined\"\n  )\n  invariant(\n    nonce,\n    \"Encode Message For Provable Authn Error: nonce must be defined\"\n  )\n  invariant(\n    appIdentifier,\n    \"Encode Message For Provable Authn Error: appIdentifier must be defined\"\n  )\n\n  invariant(\n    nonce.length >= 64,\n    \"Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes\"\n  )\n\n  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(\n    Buffer.from(\"FCL-ACCOUNT-PROOF-V0.0\").toString(\"hex\"),\n    32\n  )\n\n  if (includeDomainTag) {\n    return Buffer.concat([\n      ACCOUNT_PROOF_DOMAIN_TAG,\n      rlpEncode([\n        appIdentifier,\n        addressBuffer(sansPrefix(address)),\n        nonceBuffer(nonce),\n      ]),\n    ]).toString(\"hex\")\n  }\n\n  return rlpEncode([\n    appIdentifier,\n    addressBuffer(sansPrefix(address)),\n    nonceBuffer(nonce),\n  ]).toString(\"hex\")\n}\n","export function injectExtService(service) {\n  if (service.type === \"authn\" && service.endpoint != null) {\n    if (!Array.isArray(window.fcl_extensions)) {\n      window.fcl_extensions = []\n    }\n    window.fcl_extensions.push(service)\n  } else {\n    console.warn(\"Authn service is required\")\n  }\n}\n","import {config} from \"@onflow/config\"\nimport {log} from \"@onflow/util-logger\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {withPrefix, sansPrefix} from \"@onflow/util-address\"\nimport {query} from \"../exec/query\"\nimport {encodeAccountProof} from \"../wallet-utils\"\nimport {isString} from \"../exec/utils/is\"\n\nconst ACCOUNT_PROOF = \"ACCOUNT_PROOF\"\nconst USER_SIGNATURE = \"USER_SIGNATURE\"\n\nexport const validateArgs = args => {\n  if (args.appIdentifier) {\n    const {appIdentifier, address, nonce, signatures} = args\n    invariant(\n      isString(appIdentifier),\n      \"verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string\"\n    )\n    invariant(\n      isString(address) && sansPrefix(address).length === 16,\n      \"verifyAccountProof({ address }) -- address must be a valid address\"\n    )\n    invariant(/^[0-9a-f]+$/i.test(nonce), \"nonce must be a hex string\")\n    invariant(\n      Array.isArray(signatures) &&\n        signatures.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"),\n      \"Must include an Array of CompositeSignatures to verify\"\n    )\n    invariant(\n      signatures.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]),\n      \"User signatures to be verified must be from a single account address\"\n    )\n    return true\n  } else {\n    const {message, address, compSigs} = args\n    invariant(\n      /^[0-9a-f]+$/i.test(message),\n      \"Signed message must be a hex string\"\n    )\n    invariant(\n      isString(address) && sansPrefix(address).length === 16,\n      \"verifyUserSignatures({ address }) -- address must be a valid address\"\n    )\n    invariant(\n      Array.isArray(compSigs) &&\n        compSigs.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"),\n      \"Must include an Array of CompositeSignatures to verify\"\n    )\n    invariant(\n      compSigs.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]),\n      \"User signatures to be verified must be from a single account address\"\n    )\n    return true\n  }\n}\n\nconst getVerifySignaturesScript = async (sig, opts) => {\n  const verifyFunction =\n    sig === \"ACCOUNT_PROOF\"\n      ? \"verifyAccountProofSignatures\"\n      : \"verifyUserSignatures\"\n\n  let network = await config.get(\"flow.network\")\n  if (!network) {\n    network = await config.get(\"env\")\n    if (network)\n      log.deprecate({\n        pkg: \"FCL\",\n        subject:\n          'Using the \"env\" configuration key for specifying the flow network',\n        message: 'Please use \"flow.network\" instead.',\n        transition:\n          \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key\",\n      })\n  }\n\n  let fclCryptoContract\n\n  invariant(\n    opts.fclCryptoContract || network === \"testnet\" || network === \"mainnet\",\n    \"${verifyFunction}({ fclCryptoContract }) -- config.flow.network must be specified (testnet || mainnet) or contract address provided via opts.fclCryptoContract\"\n  )\n\n  if (opts.fclCryptoContract) {\n    fclCryptoContract = opts.fclCryptoContract\n  } else {\n    fclCryptoContract =\n      network === \"testnet\" ? \"0x74daa6f9c7ef24b1\" : \"0xb4b82a1c9d21d284\"\n  }\n\n  return `\n      import FCLCrypto from ${fclCryptoContract}\n\n      pub fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    `\n}\n\n/**\n * Verify a valid account proof signature or signatures for an account on Flow.\n *\n * @param {string} appIdentifier - A message string in hexadecimal format\n * @param {Object} accountProofData - An object consisting of address, nonce, and signatures\n * @param {string} accountProofData.address - A Flow account address\n * @param {string} accountProofData.nonce - A random string in hexadecimal format (minimum 32 bytes in total, i.e 64 hex characters)\n * @param {Object[]} accountProofData.signatures - An array of composite signatures to verify\n * @param {Object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override Flow account address where the FCLCrypto contract is deployed\n * @return {bool}\n *\n * @example\n *\n *  const accountProofData = {\n *   address: \"0x123\",\n *   nonce: \"F0123\"\n *   signatures: [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *  }\n *\n *  const isValid = await fcl.AppUtils.verifyAccountProof(\n *    \"AwesomeAppId\",\n *    accountProofData,\n *    {fclCryptoContract}\n *  )\n */\n\nexport async function verifyAccountProof(\n  appIdentifier,\n  {address, nonce, signatures},\n  opts = {}\n) {\n  validateArgs({appIdentifier, address, nonce, signatures})\n  const message = encodeAccountProof({address, nonce, appIdentifier}, false)\n\n  let signaturesArr = []\n  let keyIndices = []\n\n  for (const el of signatures) {\n    signaturesArr.push(el.signature)\n    keyIndices.push(el.keyId.toString())\n  }\n\n  return query({\n    cadence: await getVerifySignaturesScript(ACCOUNT_PROOF, opts),\n    args: (arg, t) => [\n      arg(withPrefix(address), t.Address),\n      arg(message, t.String),\n      arg(keyIndices, t.Array([t.Int])),\n      arg(signaturesArr, t.Array([t.String])),\n    ],\n  })\n}\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @param {string} msg - A message string in hexadecimal format\n * @param {Array} compSigs - An array of Composite Signatures\n * @param {string} compSigs[].addr - The account address\n * @param {number} compSigs[].keyId - The account keyId\n * @param {string} compSigs[].signature - The signature to verify\n * @param {Object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override of Flow account address where the FCLCrypto contract is deployed\n * @return {bool}\n *\n * @example\n *\n *  const isValid = await fcl.AppUtils.verifyUserSignatures(\n *    Buffer.from('FOO').toString(\"hex\"),\n *    [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *    {fclCryptoContract}\n *  )\n */\nexport async function verifyUserSignatures(message, compSigs, opts = {}) {\n  const address = withPrefix(compSigs[0].addr)\n  validateArgs({message, address, compSigs})\n\n  let signaturesArr = []\n  let keyIndices = []\n\n  for (const el of compSigs) {\n    signaturesArr.push(el.signature)\n    keyIndices.push(el.keyId.toString())\n  }\n\n  return query({\n    cadence: await getVerifySignaturesScript(USER_SIGNATURE, opts),\n    args: (arg, t) => [\n      arg(address, t.Address),\n      arg(message, t.String),\n      arg(keyIndices, t.Array([t.Int])),\n      arg(signaturesArr, t.Array([t.String])),\n    ],\n  })\n}\n","import {log} from \"@onflow/util-logger\"\nimport {verifyUserSignatures as verify} from \"../app-utils\"\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead\n *\n */\nexport const verifyUserSignatures = log.deprecate({\n  pkg: \"FCL\",\n  subject: \"fcl.verifyUserSignatures()\",\n  message: \"Please use fcl.AppUtils.verifyUserSignatures()\",\n  callback: function verifyUserSignatures(message, compSigs) {\n    return verify(message, compSigs)\n  },\n})\n","import {interaction, pipe} from \"@onflow/sdk\"\nimport {resolve as defaultResolve} from \"@onflow/sdk\"\nimport {config, createSignableVoucher} from \"@onflow/sdk\"\n\nexport const serialize = async (args = [], opts = {}) => {\n  const resolveFunction = await config.first(\n    [\"sdk.resolve\"],\n    opts.resolve || defaultResolve\n  )\n\n  if (Array.isArray(args)) args = await pipe(interaction(), args)\n\n  return JSON.stringify(\n    createSignableVoucher(await resolveFunction(args)),\n    null,\n    2\n  )\n}\n","import {spawn, subscriber, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {\n  config,\n  block,\n  getEventsAtBlockHeightRange,\n  send,\n  decode,\n} from \"@onflow/sdk\"\n\nconst RATE = 10000\nconst UPDATED = \"UPDATED\"\nconst TICK = \"TICK\"\nconst HIGH_WATER_MARK = \"hwm\"\n\nconst scheduleTick = async ctx => {\n  return setTimeout(\n    () => ctx.sendSelf(TICK),\n    await config().get(\"fcl.eventPollRate\", RATE)\n  )\n}\n\nconst HANDLERS = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return\n    let hwm = ctx.get(HIGH_WATER_MARK)\n    if (hwm == null) {\n      ctx.put(HIGH_WATER_MARK, await block())\n      ctx.put(TICK, await scheduleTick(ctx))\n    } else {\n      let next = await block()\n      ctx.put(HIGH_WATER_MARK, next)\n      if (hwm.height < next.height) {\n        const data = await send([\n          getEventsAtBlockHeightRange(ctx.self(), hwm.height + 1, next.height),\n        ]).then(decode)\n        for (let d of data) ctx.broadcast(UPDATED, d.data)\n      }\n      ctx.put(TICK, await scheduleTick(ctx))\n    }\n  },\n  [SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(TICK, await scheduleTick(ctx))\n    }\n    ctx.subscribe(letter.from)\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(TICK))\n      ctx.delete(TICK)\n      ctx.delete(HIGH_WATER_MARK)\n    }\n  },\n}\n\nconst spawnEvents = key => spawn(HANDLERS, key)\n\nexport function events(key) {\n  return {\n    subscribe: callback => subscriber(key, spawnEvents, callback),\n  }\n}\n","import {config} from \"@onflow/config\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {VERSION} from \"../VERSION\"\n\nconst isWindow = () => typeof window !== \"undefined\"\n\nexport async function getServices({ types }) {\n  const endpoint = await config.get(\"discovery.authn.endpoint\")\n  invariant(\n    Boolean(endpoint),\n    `\"discovery.authn.endpoint\" in config must be defined.`\n  )\n\n  const include = await config.get(\"discovery.authn.include\", [])\n  const url = new URL(endpoint)\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      type: types,\n      fclVersion: VERSION,\n      include,\n      extensions: isWindow() ? (window.fcl_extensions || []) : [],\n      userAgent: window?.navigator?.userAgent\n    })\n  }).then(d => d.json())\n}\n","import {\n  spawn,\n  subscriber,\n  snapshoter,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  send,\n} from \"@onflow/util-actor\"\nimport {getServices} from \"../services\"\n\nexport const SERVICE_ACTOR_KEYS = {\n  AUTHN: \"authn\",\n  RESULTS: \"results\",\n  SNAPSHOT: \"SNAPSHOT\",\n  UPDATED: \"UPDATED\",\n  UPDATE_RESULTS: \"UPDATE_RESULTS\"\n}\n\nconst warn = (fact, msg) => {\n  if (fact) {\n    console.warn(\n      `\n      %cFCL Warning\n      ============================\n      ${msg}\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      `,\n      \"font-weight:bold;font-family:monospace;\"\n    )\n  }\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    warn(typeof window === \"undefined\", '\"fcl.discovery\" is only available in the browser.')\n    // If you call this before the window is loaded extensions will not be set yet\n    window.onload = async () => {\n      try {\n        const services = await getServices({ types: [SERVICE_ACTOR_KEYS.AUTHN] })\n        send(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, { results: services })\n      } catch (_) {\n        console.log(\"Error fetching Discovery API services.\")\n      }\n    }\n  },\n  [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {\n    ctx.merge(data)\n    ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {...ctx.all()})\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),\n  [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) => letter.reply({...ctx.all()}),\n}\n\nconst spawnProviders = () => spawn(HANDLERS, SERVICE_ACTOR_KEYS.AUTHN)\n\nconst authn = {\n  subscribe: cb => subscriber(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders, cb),\n  snapshot: () => snapshoter(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders)\n}\n\nexport default authn\n","import authn from \"./services/authn\"\n\nconst discovery = {\n  authn,\n}\n\nexport {discovery}\n","import \"./default-config\"\nexport {VERSION} from \"./VERSION\"\nexport {query} from \"./exec/query\"\nexport {mutate} from \"./exec/mutate\"\nexport {verifyUserSignatures} from \"./exec/verify\"\nexport {serialize} from \"./serialize\"\nexport {transaction as tx} from \"./transaction\"\nexport {events} from \"./events\"\n\nimport {currentUser} from \"./current-user\"\nexport {currentUser}\n\nimport {discovery} from \"./discovery\"\nexport {discovery}\n\nexport const authenticate = (opts = {}) => currentUser().authenticate(opts)\nexport const unauthenticate = () => currentUser().unauthenticate()\nexport const reauthenticate = (opts = {}) => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate(opts)\n}\nexport const signUp = (opts = {}) => currentUser().authenticate(opts)\nexport const logIn = (opts = {}) => currentUser().authenticate(opts)\n\nexport const authz = currentUser().authorization\n\nimport * as types from \"@onflow/types\"\nexport const t = types\n\nimport * as WalletUtils from \"./wallet-utils\"\nexport {WalletUtils}\n\nimport * as AppUtils from \"./app-utils\"\nexport {AppUtils}\n\nexport {TestUtils} from \"@onflow/sdk\"\nexport {config} from \"@onflow/config\"\nexport {send} from \"@onflow/sdk\"\nexport {decode} from \"@onflow/sdk\"\nexport {account} from \"@onflow/sdk\"\nexport {block} from \"@onflow/sdk\"\nexport {isOk, isBad, why, pipe, build} from \"@onflow/sdk\"\nexport {withPrefix, sansPrefix, display} from \"@onflow/util-address\"\nexport {template as cadence} from \"@onflow/util-template\"\nexport {template as cdc} from \"@onflow/util-template\"\nexport {createSignableVoucher} from \"@onflow/sdk\"\nexport {voucherIntercept} from \"@onflow/sdk\"\nexport {voucherToTxId} from \"@onflow/sdk\"\n\n// builders\nexport {transaction} from \"@onflow/sdk\"\nexport {script} from \"@onflow/sdk\"\nexport {ping} from \"@onflow/sdk\"\nexport {atBlockHeight} from \"@onflow/sdk\"\nexport {atBlockId} from \"@onflow/sdk\"\nexport {getAccount} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nexport {getEventsAtBlockHeightRange} from \"@onflow/sdk\"\nexport {getEventsAtBlockIds} from \"@onflow/sdk\"\nexport {getBlock} from \"@onflow/sdk\"\nexport {getBlockHeader} from \"@onflow/sdk\"\nexport {getCollection} from \"@onflow/sdk\"\nexport {getTransactionStatus} from \"@onflow/sdk\"\nexport {getTransaction} from \"@onflow/sdk\"\nexport {authorizations, authorization} from \"@onflow/sdk\"\nexport {args, arg} from \"@onflow/sdk\"\nexport {proposer} from \"@onflow/sdk\"\nexport {payer} from \"@onflow/sdk\"\nexport {limit} from \"@onflow/sdk\"\nexport {ref} from \"@onflow/sdk\"\nexport {params, param} from \"@onflow/sdk\"\nexport {validator} from \"@onflow/sdk\"\nexport {invariant} from \"@onflow/sdk\"\n"],"names":["VERSION","isServerSide","window","SESSION_STORAGE","can","get","_asyncToGenerator","_regeneratorRuntime","key","JSON","parse","sessionStorage","getItem","put","value","setItem","stringify","localStorage","STORAGE_DEFAULT","DISCOVERY_METHOD","configLens","regex","Object","config","where","entries","map","_slicedToArray","replace","fromEntries","getDiscoveryService","first","discoveryWallet","discoveryAuthnInclude","discoveryWalletMethod","type","endpoint","method","is","d","_typeof","isRequired","isObject","isString","isFunc","isNumber","normalizeArgs","ax","sdk","arg","t","query","opts","preQuery","send","script","cadence","args","limit","then","decode","invariant","fetchServices","servicesURL","code","url","URL","searchParams","append","fetch","headers","json","resp","Array","isArray","services","authorizations","service","push","_objectSpread","keyId","provider","id","mergeServices","sx1","sx2","SERVICE_PRAGMA","f_type","f_vsn","IDENTITY_PRAGMA","USER_PRAGMA","POLLING_RESPONSE_PRAGMA","COMPOSITE_SIGNATURE_PRAGMA","normalizeAuthn","uid","authn","pid","address","withPrefix","addr","name","icon","normalizeAuthz","identity","params","data","normalizePreAuthz","normalizeFrame","old","normalizeBackChannelRpc","normalizeOpenId","normalizeUserSignature","Error","normalizeLocalView","normalizeAccountProof","normalizeAuthnRefresh","serviceNormalizers","authz","frame","normalizeService","normalized","error","console","deriveCompositeId","rlp","encode","toString","normalizeData","paddr","findService","find","buildUser","hks","cid","loggedIn","expiresAt","expires","serviceOfType","serviceEndpoint","location","origin","fetchService","body","undefined","normalizePollingResponse","status","reason","compositeSignature","updates","authorizationUpdates","local","OPTIONS","serviceMethod","poll","canContinue","Promise","r","setTimeout","FRAME","FRAME_STYLES","renderFrame","src","document","getElementById","$frame","createElement","allow","frameBorder","style","cssText","unmount","remove","contentWindow","POP","popup","previousUrl","popupWindow","windowName","win","w","h","y","top","outerHeight","screenY","x","outerWidth","screenX","open","renderPop","closed","focus","close","tab","renderTab","VIEWS","execLocal","execHttpPost","signable","fclVersion","serviceResponse","CLOSE_EVENT","READY_EVENT","RESPONSE_EVENT","_","e","toLowerCase","IGNORE","Set","deprecate","was","want","warn","buildMessageHandler","onReady","onResponse","onMessage","has","noop","onClose","handler","addEventListener","removeEventListener","msg","postMessage","execIframeRPC","resolve","reject","includeOlderJsonRpcCall","deprecated","message","jsonrpc","result","pop","$pop","timer","setInterval","clearInterval","execPopRPC","redir","$tab","execTabRPC","extension","execExtRPC","STRATEGIES","execService","fclLibrary","hostname","extensions","fcl_extensions","app","client","fullConfig","res","normalizeCompositeSignature","sansPrefix","signature","sig","isFn","NAME","UPDATED","SNAPSHOT","SET_CURRENT_USER","DEL_CURRENT_USER","DATA","getStoredUser","storage","fallback","stored","removeItem","HANDLERS","INIT","ctx","merge","user","notExpired","_defineProperty","_HANDLERS","SUBSCRIBE","letter","subscribe","from","all","UNSUBSCRIBE","unsubscribe","reply","broadcast","spawnCurrentUser","spawn","Date","now","getAccountProofData","accountProofDataResolver","accountProofData","appIdentifier","test","nonce","isServiceMethodUnchangable","includes","authenticate","is_installed","requires_install","href","install_link","snapshot","discoveryService","refreshService","response","unauthenticate","normalizePreAuthzResponse","proposer","payer","authorization","resolvePreAuthz","axs","_createForOfIteratorHelper","az","role","tempId","join","signingFunction","authorizer","account","preSignable","preAuthz","sequenceNum","callback","EXIT","self","receive","tag","expectReply","timeout","resolveArgument","Address","makeSignable","signUserMessage","signingService","compSigs","currentUser","RATE","POLL","fetchTxStatus","transactionId","fclSend","getTransactionStatus","isExpired","tx","isSealed","isExecuted","isFinalized","isPending","isUnknown","isDiff","cur","next","sendSelf","fatalError","scoped","spawnTransaction","transaction","snapshoter","subscriber","once","predicate","innerOnce","suppress","unsub","txStatus","statusCode","errorMessage","onceFinalized","onceExecuted","onceSealed","mutate","prepMutation","txid","onMessageFromFCL","messageType","cb","buildData","interaction","internal","sendMsgToFCL","parent","opener","ready","approve","decline","redirect","CompositeSignature","Number","rightPaddedHexBuffer","pad","Buffer","padEnd","leftPaddedHexBuffer","padStart","addressBuffer","nonceBuffer","encodeAccountProof","includeDomainTag","length","ACCOUNT_PROOF_DOMAIN_TAG","concat","rlpEncode","injectExtService","ACCOUNT_PROOF","USER_SIGNATURE","validateArgs","signatures","every","i","arr","cs","getVerifySignaturesScript","verifyFunction","network","log","pkg","subject","transition","fclCryptoContract","verifyAccountProof","signaturesArr","keyIndices","el","String","Int","verifyUserSignatures","verify","serialize","defaultResolve","resolveFunction","pipe","createSignableVoucher","TICK","HIGH_WATER_MARK","scheduleTick","hasSubs","hwm","block","height","getEventsAtBlockHeightRange","clearTimeout","spawnEvents","events","isWindow","getServices","types","Boolean","include","userAgent","navigator","SERVICE_ACTOR_KEYS","AUTHN","RESULTS","UPDATE_RESULTS","fact","onload","results","_letter","spawnProviders","discovery","reauthenticate","signUp","logIn"],"mappings":"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"}