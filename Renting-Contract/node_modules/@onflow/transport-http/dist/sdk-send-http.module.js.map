{"version":3,"file":"sdk-send-http.module.js","sources":["../src/http-request.js","../src/send-execute-script.js","../src/send-get-account.js","../src/send-get-block-header.js","../src/send-get-block.js","../src/send-get-collection.js","../src/send-get-events.js","../src/send-get-transaction.js","../src/send-get-transaction-status.js","../src/send-ping.js","../src/send-transaction.js","../src/send-http.js"],"sourcesContent":["import * as logger from \"@onflow/util-logger\"\nimport fetchTransport from \"node-fetch\"\n\nclass HTTPRequestError extends Error {\n  constructor({\n    error,\n    hostname,\n    path,\n    method,\n    requestBody,\n    responseBody,\n    responseStatusText,\n    statusCode,\n  }) {\n    const msg = `\n      HTTP Request Error: An error occurred when interacting with the Access API.\n      ${error ? `error=${error}` : \"\"}\n      ${hostname ? `hostname=${hostname}` : \"\"}\n      ${path ? `path=${path}` : \"\"}\n      ${method ? `method=${method}` : \"\"}\n      ${requestBody ? `requestBody=${JSON.stringify(requestBody)}` : \"\"}\n      ${responseBody ? `responseBody=${JSON.stringify(responseBody)}` : \"\"}\n      ${responseStatusText ? `responseStatusText=${responseStatusText}` : \"\"}\n      ${statusCode ? `statusCode=${statusCode}` : \"\"}\n    `\n    super(msg)\n    this.name = \"HTTP Request Error\"\n    this.statusCode = responseBody?.code ?? statusCode\n    this.errorMessage = responseBody?.message\n  }\n}\n\n/**\n * Creates an HTTP Request to be sent to a REST Access API via Fetch API.\n *\n * @param {Object} options - Options for the HTTP Request\n * @param {String} options.hostname - Access API Hostname\n * @param {String} options.path - Path to the resource on the Access API\n * @param {String} options.method - HTTP Method\n * @param {any} options.body - HTTP Request Body\n * @param {Object | Headers} [options.headers] - HTTP Request Headers\n *\n * @returns JSON object response from Access API.\n */\nexport async function httpRequest({\n  hostname,\n  path,\n  method,\n  body,\n  headers,\n  retryLimit = 5,\n  retryIntervalMs = 1000,\n}) {\n  async function requestLoop(retryAttempt = 0) {\n    try {\n      const resp = await makeRequest()\n      return resp\n    } catch (error) {\n      const retryStatusCodes = [408, 500, 502, 503, 504]\n\n      if (retryStatusCodes.includes(error.statusCode)) {\n        return await new Promise((resolve, reject) => {\n          if (retryAttempt < retryLimit) {\n            console.log(\n              `Access node unavailable, retrying in ${retryIntervalMs} ms...`\n            )\n            setTimeout(() => {\n              resolve(requestLoop(retryAttempt + 1))\n            }, retryIntervalMs)\n          } else {\n            reject(error)\n          }\n        })\n      } else {\n        throw error\n      }\n    }\n  }\n\n  function makeRequest() {\n    return fetchTransport(`${hostname}${path}`, {\n      method: method,\n      body: body ? JSON.stringify(body) : undefined,\n      headers,\n    })\n      .then(async res => {\n        if (res.ok) {\n          return res.json()\n        }\n\n        const responseJSON = res.body ? await res.json() : null\n\n        throw new HTTPRequestError({\n          error: responseJSON?.message,\n          hostname,\n          path,\n          method,\n          requestBody: body,\n          responseBody: responseJSON,\n          responseStatusText: res.statusText,\n          statusCode: res.status,\n        })\n      })\n      .catch(async e => {\n        if (e instanceof HTTPRequestError) {\n          throw e\n        }\n\n        // Show AN error for all network errors\n        await logger.log({\n          title: \"Access Node Error\",\n          message: `The provided access node ${hostname} does not appear to be a valid REST/HTTP access node.\nPlease verify that you are not unintentionally using a GRPC access node.\nSee more here: https://docs.onflow.org/fcl/reference/sdk-guidelines/#connect`,\n          level: logger.LEVELS.error,\n        })\n\n        throw new HTTPRequestError({\n          error: e?.message,\n          hostname,\n          path,\n          method,\n          requestBody: body,\n        })\n      })\n  }\n\n  // Keep retrying request until server available or max attempts exceeded\n  return await requestLoop()\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {Buffer} from \"@onflow/rlp\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendExecuteScriptAtBlockIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_id=${ix.block.id}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=${ix.block.height}`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendExecuteScriptAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/scripts?block_height=sealed`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: ix.message.arguments.map(arg =>\n        context.Buffer.from(\n          JSON.stringify(ix.arguments[arg].asArgument)\n        ).toString(\"base64\")\n      ),\n    },\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  ret.encodedData = JSON.parse(context.Buffer.from(res, \"base64\").toString())\n\n  return ret\n}\n\nexport async function sendExecuteScript(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Execute Script Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Execute Script Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Execute Script Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  if (ix.block.id) {\n    return await sendExecuteScriptAtBlockIDRequest(ix, context, opts)\n  } else if (ix.block.height) {\n    return await sendExecuteScriptAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendExecuteScriptAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nconst HashAlgorithmIDs = {\n  SHA2_256: 1,\n  SHA2_384: 2,\n  SHA3_256: 3,\n  SHA3_384: 4,\n  KMAC128_BLS_BLS12_381: 5,\n}\n\nconst SignatureAlgorithmIDs = {\n  ECDSA_P256: 1,\n  ECDSA_secp256k1: 2,\n  BLS_BLS12_381: 3,\n}\n\nasync function sendGetAccountAtBlockHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=${ix.block.height}&expand=contracts,keys`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetAccountAtLatestBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/accounts/${ix.account.addr}?block_height=sealed&expand=contracts,keys`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  const unwrapContracts = contracts => {\n    const c = {}\n    if (!contracts) return c\n    for (let key of Object.keys(contracts)) {\n      c[key] = context.Buffer.from(contracts[key], \"base64\").toString()\n    }\n    return c\n  }\n\n  ret.account = {\n    address: res.address,\n    balance: Number(res.balance),\n    code: \"\",\n    contracts: unwrapContracts(res.contracts),\n    keys:\n      res.keys?.map(key => ({\n        index: Number(key.index),\n        publicKey: key.public_key.replace(/^0x/, \"\"),\n        signAlgo: SignatureAlgorithmIDs[key.signing_algorithm],\n        signAlgoString: key.signing_algorithm,\n        hashAlgo: HashAlgorithmIDs[key.hashing_algorithm],\n        hashAlgoString: key.hashing_algorithm,\n        sequenceNumber: Number(key.sequence_number),\n        weight: Number(key.weight),\n        revoked: key.revoked,\n      })) ?? [],\n  }\n\n  return ret\n}\n\nexport async function sendGetAccount(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Account Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Account Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Account Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  if (ix.block.height !== null) {\n    return await sendGetAccountAtBlockHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetAccountAtLatestBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetBlockHeaderByIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockHeaderByHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetLatestBlockHeaderRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const height = ix.block?.isSealed ? \"sealed\" : \"finalized\"\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.length ? res[0] : null\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.blockHeader = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n  }\n\n  return ret\n}\n\nexport async function sendGetBlockHeader(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Block Header Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Block Header Error: context.response must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockHeaderByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockHeaderByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetLatestBlockHeaderRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetBlockByIDRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks/${ix.block.id}?expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockByHeightRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${ix.block.height}&expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetBlockRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const height = ix.block?.isSealed ? \"sealed\" : \"final\"\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/blocks?height=${height}&expand=payload`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  const block = res.length ? res[0] : null\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.block = {\n    id: block.header.id,\n    parentId: block.header.parent_id,\n    height: Number(block.header.height),\n    timestamp: block.header.timestamp,\n    collectionGuarantees: block.payload.collection_guarantees.map(\n      collectionGuarantee => ({\n        collectionId: collectionGuarantee.collection_id,\n        signerIds: collectionGuarantee.signer_ids,\n      })\n    ),\n    blockSeals: block.payload.block_seals.map(blockSeal => ({\n      blockId: blockSeal.block_id,\n      executionReceiptId: blockSeal.result_id,\n    })),\n  }\n\n  return ret\n}\n\nexport async function sendGetBlock(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Block Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Block Error: context.response must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionHasBlockID = ix.block.id !== null\n  const interactionHasBlockHeight = ix.block.height !== null\n\n  if (interactionHasBlockID) {\n    return await sendGetBlockByIDRequest(ix, context, opts)\n  } else if (interactionHasBlockHeight) {\n    return await sendGetBlockByHeightRequest(ix, context, opts)\n  } else {\n    return await sendGetBlockRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendGetCollection(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Collection Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Collection Error: context.response must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/collections/${ix.collection.id}?expand=transactions`,\n    method: \"GET\",\n    body: null,\n  })\n\n  const ret = context.response()\n  ret.tag = ix.tag\n  ret.collection = {\n    id: res.id,\n    transactionIds: res.transactions.map(transaction => transaction.id),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nasync function sendGetEventsForHeightRangeRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/events?type=${ix.events.eventType}&start_height=${ix.events.start}&end_height=${ix.events.end}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nasync function sendGetEventsForBlockIDsRequest(ix, context, opts) {\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/events?type=${\n      ix.events.eventType\n    }&block_ids=${ix.events.blockIds.join(\",\")}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  return constructResponse(ix, context, res)\n}\n\nfunction constructResponse(ix, context, res) {\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  ret.events = []\n  res.forEach(block =>\n    block.events\n      ? block.events.forEach(event =>\n          ret.events.push({\n            blockId: block.block_id,\n            blockHeight: Number(block.block_height),\n            blockTimestamp: block.block_timestamp,\n            type: event.type,\n            transactionId: event.transaction_id,\n            transactionIndex: Number(event.transaction_index),\n            eventIndex: Number(event.event_index),\n            payload: JSON.parse(\n              context.Buffer.from(event.payload, \"base64\").toString()\n            ),\n          })\n        )\n      : null\n  )\n\n  return ret\n}\n\nexport async function sendGetEvents(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Get Events Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Get Events Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Events Error: context.Buffer must be defined.`\n  )\n\n  ix = await ix\n\n  const interactionContainsBlockHeightRange = ix.events.start !== null\n  const interactionContainsBlockIDsList =\n    Array.isArray(ix.events.blockIds) && ix.events.blockIds.length > 0\n\n  invariant(\n    interactionContainsBlockHeightRange || interactionContainsBlockIDsList,\n    \"SendGetEventsError: Unable to determine which get events request to send. Either a block height range, or block IDs must be specified.\"\n  )\n\n  if (interactionContainsBlockHeightRange) {\n    return await sendGetEventsForHeightRangeRequest(ix, context, opts)\n  } else {\n    return await sendGetEventsForBlockIDsRequest(ix, context, opts)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendGetTransaction(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Transaction Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Transaction Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Transaction Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transactions/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  const unwrapKey = key => ({\n    address: key.address,\n    keyId: Number(key.key_id),\n    sequenceNumber: Number(key.sequence_number),\n  })\n\n  const unwrapSignature = sig => ({\n    address: sig.address,\n    keyId: Number(sig.key_index),\n    signature: sig.signature,\n  })\n\n  const unwrapArg = arg =>\n    JSON.parse(context.Buffer.from(arg, \"base64\").toString())\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transaction = {\n    script: context.Buffer.from(res.script, \"base64\").toString(),\n    args: [...res.arguments.map(unwrapArg)],\n    referenceBlockId: res.reference_block_id,\n    gasLimit: Number(res.gas_limit),\n    payer: res.payer,\n    proposalKey: res.proposal_key\n      ? unwrapKey(res.proposal_key)\n      : res.proposal_key,\n    authorizers: res.authorizers,\n    payloadSignatures: [...res.payload_signatures.map(unwrapSignature)],\n    envelopeSignatures: [...res.envelope_signatures.map(unwrapSignature)],\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nconst STATUS_MAP = {\n  UNKNOWN: 0,\n  PENDING: 1,\n  FINALIZED: 2,\n  EXECUTED: 3,\n  SEALED: 4,\n  EXPIRED: 5,\n}\n\nexport async function sendGetTransactionStatus(ix, context = {}, opts = {}) {\n  invariant(\n    opts.node,\n    `SDK Send Get Transaction Status Error: opts.node must be defined.`\n  )\n  invariant(\n    context.response,\n    `SDK Send Get Transaction Status Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Get Transaction Status Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transaction_results/${ix.transaction.id}`,\n    method: \"GET\",\n    body: null,\n  })\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionStatus = {\n    blockId: res.block_id,\n    status: STATUS_MAP[res.status.toUpperCase()] || \"\",\n    statusString: res.status.toUpperCase(),\n    statusCode: res.status_code,\n    errorMessage: res.error_message,\n    events: res.events.map(event => ({\n      type: event.type,\n      transactionId: event.transaction_id,\n      transactionIndex: Number(event.transaction_index),\n      eventIndex: Number(event.event_index),\n      payload: JSON.parse(\n        context.Buffer.from(event.payload, \"base64\").toString()\n      ),\n    })),\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendPing(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Ping Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Ping Error: context.response must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  await httpRequest({\n    hostname: opts.node,\n    path: \"/v1/blocks?height=sealed\",\n    method: \"GET\",\n    body: null,\n  })\n\n  let ret = context.response()\n  ret.tag = ix.tag\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sansPrefix} from \"@onflow/util-address\"\nimport {httpRequest as defaultHttpRequest} from \"./http-request.js\"\n\nexport async function sendTransaction(ix, context = {}, opts = {}) {\n  invariant(opts.node, `SDK Send Transaction Error: opts.node must be defined.`)\n  invariant(\n    context.response,\n    `SDK Send Transaction Error: context.response must be defined.`\n  )\n  invariant(\n    context.Buffer,\n    `SDK Send Transaction Error: context.Buffer must be defined.`\n  )\n\n  const httpRequest = opts.httpRequest || defaultHttpRequest\n\n  ix = await ix\n\n  // Apply Non Payer Signatures to Payload Signatures\n  let payloadSignatures = []\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (!acct.role.payer && acct.signature != null) {\n        payloadSignatures.push({\n          address: sansPrefix(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\n            \"base64\"\n          ),\n        })\n      }\n    } catch (error) {\n      console.error(\"SDK HTTP Send Error: Trouble applying payload signature\", {\n        acct,\n        ix,\n      })\n      throw error\n    }\n  }\n\n  // Apply Payer Signatures to Envelope Signatures\n  let envelopeSignatures = {}\n  for (let acct of Object.values(ix.accounts)) {\n    try {\n      if (acct.role.payer && acct.signature != null) {\n        let id = acct.tempId || `${acct.addr}-${acct.keyId}`\n        envelopeSignatures[id] = envelopeSignatures[id] || {\n          address: sansPrefix(acct.addr),\n          key_index: String(acct.keyId),\n          signature: context.Buffer.from(acct.signature, \"hex\").toString(\n            \"base64\"\n          ),\n        }\n      }\n    } catch (error) {\n      console.error(\n        \"SDK HTTP Send Error: Trouble applying envelope signature\",\n        {acct, ix}\n      )\n      throw error\n    }\n  }\n  envelopeSignatures = Object.values(envelopeSignatures)\n\n  var t1 = Date.now()\n  const res = await httpRequest({\n    hostname: opts.node,\n    path: `/v1/transactions`,\n    method: \"POST\",\n    body: {\n      script: context.Buffer.from(ix.message.cadence).toString(\"base64\"),\n      arguments: [\n        ...ix.message.arguments.map(arg =>\n          context.Buffer.from(\n            JSON.stringify(ix.arguments[arg].asArgument)\n          ).toString(\"base64\")\n        ),\n      ],\n      reference_block_id: ix.message.refBlock ? ix.message.refBlock : null,\n      gas_limit: String(ix.message.computeLimit),\n      payer: sansPrefix(\n        ix.accounts[Array.isArray(ix.payer) ? ix.payer[0] : ix.payer].addr\n      ),\n      proposal_key: {\n        address: sansPrefix(ix.accounts[ix.proposer].addr),\n        key_index: String(ix.accounts[ix.proposer].keyId),\n        sequence_number: String(ix.accounts[ix.proposer].sequenceNum),\n      },\n      authorizers: ix.authorizations\n        .map(tempId => ix.accounts[tempId].addr)\n        .reduce((prev, current) => {\n          return prev.find(item => item === current) ? prev : [...prev, current]\n        }, [])\n        .map(sansPrefix),\n      payload_signatures: payloadSignatures,\n      envelope_signatures: envelopeSignatures,\n    },\n  })\n  var t2 = Date.now()\n\n  let ret = context.response()\n  ret.tag = ix.tag\n  ret.transactionId = res.id\n\n  if (typeof window !== \"undefined\") {\n    window.dispatchEvent(\n      new CustomEvent(\"FLOW::TX\", {\n        detail: {txId: ret.transactionId, delta: t2 - t1},\n      })\n    )\n  }\n\n  return ret\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {sendTransaction} from \"./send-transaction.js\"\nimport {sendGetTransactionStatus} from \"./send-get-transaction-status.js\"\nimport {sendGetTransaction} from \"./send-get-transaction.js\"\nimport {sendExecuteScript} from \"./send-execute-script.js\"\nimport {sendGetAccount} from \"./send-get-account.js\"\nimport {sendGetEvents} from \"./send-get-events.js\"\nimport {sendGetBlock} from \"./send-get-block.js\"\nimport {sendGetBlockHeader} from \"./send-get-block-header.js\"\nimport {sendGetCollection} from \"./send-get-collection.js\"\nimport {sendPing} from \"./send-ping.js\"\n\nexport const send = async (ix, context = {}, opts = {}) => {\n  invariant(\n    opts.node,\n    `SDK Send Error: Either opts.node or \"accessNode.api\" in config must be defined.`\n  )\n  invariant(context.ix, `SDK Send Error: context.ix must be defined.`)\n\n  ix = await ix\n\n  // prettier-ignore\n  switch (true) {\n    case context.ix.isTransaction(ix):\n      return opts.sendTransaction ? opts.sendTransaction(ix, context, opts) : sendTransaction(ix, context, opts)\n    case context.ix.isGetTransactionStatus(ix):\n      return opts.sendGetTransactionStatus ? opts.sendGetTransactionStatus(ix, context, opts) : sendGetTransactionStatus(ix, context, opts)\n    case context.ix.isGetTransaction(ix):\n      return opts.sendGetTransaction ? opts.sendGetTransaction(ix, context, opts) : sendGetTransaction(ix, context, opts)\n    case context.ix.isScript(ix):\n      return opts.sendExecuteScript ? opts.sendExecuteScript(ix, context, opts) : sendExecuteScript(ix, context, opts)\n    case context.ix.isGetAccount(ix):\n      return opts.sendGetAccount ? opts.sendGetAccount(ix, context, opts) : sendGetAccount(ix, context, opts)\n    case context.ix.isGetEvents(ix):\n      return opts.sendGetEvents ? opts.sendGetEvents(ix, context, opts) : sendGetEvents(ix, context, opts)\n    case context.ix.isGetBlock(ix):\n      return opts.sendGetBlock ? opts.sendGetBlock(ix, context, opts) : sendGetBlock(ix, context, opts)\n    case context.ix.isGetBlockHeader(ix):\n      return opts.sendGetBlockHeader ? opts.sendGetBlockHeader(ix, context, opts) : sendGetBlockHeader(ix, context, opts)\n    case context.ix.isGetCollection(ix):\n      return opts.sendGetCollection ? opts.sendGetCollection(ix, context, opts) : sendGetCollection(ix, context, opts)\n    case context.ix.isPing(ix):\n      return opts.sendPing ? opts.sendPing(ix, context, opts) : sendPing(ix, context, opts)\n    default:\n      return ix\n  }\n}\n"],"names":["HTTPRequestError","error","hostname","path","method","requestBody","responseBody","responseStatusText","statusCode","msg","JSON","stringify","name","code","errorMessage","message","Error","httpRequest","requestLoop","makeRequest","fetchTransport","body","undefined","headers","then","res","ok","json","responseJSON","statusText","status","e","logger","log","title","level","LEVELS","retryAttempt","resp","retryStatusCodes","includes","Promise","resolve","reject","retryLimit","console","retryIntervalMs","setTimeout","sendExecuteScriptAtBlockIDRequest","ix","context","opts","defaultHttpRequest","node","block","id","script","Buffer","from","cadence","toString","arguments","map","arg","asArgument","constructResponse","sendExecuteScriptAtBlockHeightRequest","height","sendExecuteScriptAtLatestBlockRequest","ret","response","tag","encodedData","parse","sendExecuteScript","invariant","HashAlgorithmIDs","SHA2_256","SHA2_384","SHA3_256","SHA3_384","KMAC128_BLS_BLS12_381","SignatureAlgorithmIDs","ECDSA_P256","ECDSA_secp256k1","BLS_BLS12_381","sendGetAccountAtBlockHeightRequest","account","addr","sendGetAccountAtLatestBlockRequest","unwrapContracts","contracts","c","Object","keys","key","address","balance","Number","index","publicKey","public_key","replace","signAlgo","signing_algorithm","signAlgoString","hashAlgo","hashing_algorithm","hashAlgoString","sequenceNumber","sequence_number","weight","revoked","sendGetAccount","sendGetBlockHeaderByIDRequest","sendGetBlockHeaderByHeightRequest","sendGetLatestBlockHeaderRequest","isSealed","length","blockHeader","header","parentId","parent_id","timestamp","sendGetBlockHeader","interactionHasBlockID","interactionHasBlockHeight","sendGetBlockByIDRequest","sendGetBlockByHeightRequest","sendGetBlockRequest","collectionGuarantees","payload","collection_guarantees","collectionGuarantee","collectionId","collection_id","signerIds","signer_ids","blockSeals","block_seals","blockSeal","blockId","block_id","executionReceiptId","result_id","sendGetBlock","sendGetCollection","collection","transactionIds","transactions","transaction","sendGetEventsForHeightRangeRequest","events","eventType","start","end","sendGetEventsForBlockIDsRequest","blockIds","join","forEach","event","push","blockHeight","block_height","blockTimestamp","block_timestamp","type","transactionId","transaction_id","transactionIndex","transaction_index","eventIndex","event_index","sendGetEvents","interactionContainsBlockHeightRange","interactionContainsBlockIDsList","Array","isArray","sendGetTransaction","unwrapKey","keyId","key_id","unwrapSignature","sig","key_index","signature","unwrapArg","args","referenceBlockId","reference_block_id","gasLimit","gas_limit","payer","proposalKey","proposal_key","authorizers","payloadSignatures","payload_signatures","envelopeSignatures","envelope_signatures","STATUS_MAP","UNKNOWN","PENDING","FINALIZED","EXECUTED","SEALED","EXPIRED","sendGetTransactionStatus","transactionStatus","toUpperCase","statusString","status_code","error_message","sendPing","sendTransaction","values","accounts","acct","role","sansPrefix","String","tempId","t1","Date","now","refBlock","computeLimit","proposer","sequenceNum","authorizations","reduce","prev","current","find","item","t2","window","dispatchEvent","CustomEvent","detail","txId","delta","send","isTransaction","isGetTransactionStatus","isGetTransaction","isScript","isGetAccount","isGetEvents","isGetBlock","isGetBlockHeader","isGetCollection","isPing"],"mappings":"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"}