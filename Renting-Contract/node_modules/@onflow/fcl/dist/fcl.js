'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var config = require('@onflow/config');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var utilInvariant = require('@onflow/util-invariant');
var sdk = require('@onflow/sdk');
var t$1 = require('@onflow/types');
var _typeof = require('@babel/runtime/helpers/typeof');
var _createForOfIteratorHelper = require('@babel/runtime/helpers/createForOfIteratorHelper');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var utilActor = require('@onflow/util-actor');
var utilAddress = require('@onflow/util-address');
var rlp = require('@onflow/rlp');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var utilUid = require('@onflow/util-uid');
var utilLogger = require('@onflow/util-logger');
var utilTemplate = require('@onflow/util-template');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var sdk__namespace = /*#__PURE__*/_interopNamespace(sdk);
var t__namespace = /*#__PURE__*/_interopNamespace(t$1);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _createForOfIteratorHelper__default = /*#__PURE__*/_interopDefaultLegacy(_createForOfIteratorHelper);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var rlp__namespace = /*#__PURE__*/_interopNamespace(rlp);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

var VERSION = "1.2.0" ;

var isServerSide = function isServerSide() {
  return typeof window === "undefined";
};

var SESSION_STORAGE = {
  can: !isServerSide(),
  get: function () {
    var _get = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(key) {
      return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", JSON.parse(sessionStorage.getItem(key)));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function get(_x) {
      return _get.apply(this, arguments);
    }

    return get;
  }(),
  put: function () {
    var _put = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(key, value) {
      return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", sessionStorage.setItem(key, JSON.stringify(value)));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function put(_x2, _x3) {
      return _put.apply(this, arguments);
    }

    return put;
  }()
};
({
  can: !isServerSide(),
  get: function () {
    var _get2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(key) {
      return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", JSON.parse(localStorage.getItem(key)));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function get(_x4) {
      return _get2.apply(this, arguments);
    }

    return get;
  }(),
  put: function () {
    var _put2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(key, value) {
      return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", localStorage.setItem(key, JSON.stringify(value)));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function put(_x5, _x6) {
      return _put2.apply(this, arguments);
    }

    return put;
  }()
});
var STORAGE_DEFAULT = SESSION_STORAGE;
var DISCOVERY_METHOD = "IFRAME/RPC";
function configLens(_x7) {
  return _configLens.apply(this, arguments);
}

function _configLens() {
  _configLens = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee5(regex) {
    return _regeneratorRuntime__default["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.t0 = Object;
            _context5.t1 = Object;
            _context5.next = 4;
            return config.config().where(regex);

          case 4:
            _context5.t2 = _context5.sent;
            _context5.t3 = _context5.t1.entries.call(_context5.t1, _context5.t2).map(function (_ref) {
              var _ref2 = _slicedToArray__default["default"](_ref, 2),
                  key = _ref2[0],
                  value = _ref2[1];

              return [key.replace(regex, ""), value];
            });
            return _context5.abrupt("return", _context5.t0.fromEntries.call(_context5.t0, _context5.t3));

          case 7:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _configLens.apply(this, arguments);
}

function getDiscoveryService() {
  return _getDiscoveryService.apply(this, arguments);
}

function _getDiscoveryService() {
  _getDiscoveryService = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee6() {
    var discoveryWallet, discoveryAuthnInclude, discoveryWalletMethod;
    return _regeneratorRuntime__default["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return config.config.first(["discovery.wallet", "challenge.handshake"]);

          case 2:
            discoveryWallet = _context6.sent;
            _context6.next = 5;
            return config.config.get("discovery.authn.include", []);

          case 5:
            discoveryAuthnInclude = _context6.sent;
            _context6.next = 8;
            return config.config.first(["discovery.wallet.method", "discovery.wallet.method.default"]);

          case 8:
            discoveryWalletMethod = _context6.sent;
            return _context6.abrupt("return", {
              type: "authn",
              endpoint: discoveryWallet,
              method: discoveryWalletMethod,
              discoveryAuthnInclude: discoveryAuthnInclude
            });

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getDiscoveryService.apply(this, arguments);
}

config.config({
  "discovery.wallet.method.default": DISCOVERY_METHOD,
  "fcl.storage.default": STORAGE_DEFAULT
});

var is = function is(type) {
  return function (d) {
    return _typeof__default["default"](d) === type;
  };
};

var isRequired = function isRequired(d) {
  return d != null;
};
var isObject = is("object");
var isString = is("string");
var isFunc = is("function");
var isNumber = is("number");

function normalizeArgs(ax) {
  if (isFunc(ax)) return ax(sdk__namespace.arg, t__namespace);
  return [];
}

/** Query the Flow Blockchain
 *
 *  @arg {Object} opts         - Query Options and configuration
 *  @arg {string} opts.cadence - Cadence Script used to query Flow
 *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script
 *  @arg {number} opts.limit   - Compute Limit for Query
 *  @returns {Promise<Response>}
 *
 *  Where:
 *    @callback ArgsFn
 *    @arg {ArgFn}  arg - Argument function to define a single argument
 *    @arg {Object} t   - Cadence Types object used to define the type
 *    @returns {args[]}
 *
 *    @callback ArgFn
 *    @arg {Any}  value - the value of the argument
 *    @arg {Type} type  - the cadence type of the value
 *    @returns {arg}
 *
 *  Example:
 *    const cadence = `
 *      cadence: `
 *        pub fun main(a: Int, b: Int, c: Address): Int {
 *          log(c)
 *          return a + b
 *        }
 *    `.trim()
 *
 *    const args = (arg, t) => [
 *      arg(5, t.Int),
 *      arg(7, t.Int),
 *      arg("0xb2db43ad6bc345fec9", t.Address),
 *    ]
 *
 *    await query({ cadence, args })
 */

function query() {
  return _query.apply(this, arguments);
}

function _query() {
  _query = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var opts,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.next = 3;
            return preQuery(opts);

          case 3:
            return _context.abrupt("return", sdk__namespace.send([sdk__namespace.script(opts.cadence), sdk__namespace.args(normalizeArgs(opts.args || [])), opts.limit && typeof opts.limit === "number" && sdk__namespace.limit(opts.limit)]).then(sdk__namespace.decode));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _query.apply(this, arguments);
}

function preQuery(_x) {
  return _preQuery.apply(this, arguments);
}

function _preQuery() {
  _preQuery = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(opts) {
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            utilInvariant.invariant(isRequired(opts.cadence), "query({ cadence }) -- cadence is required");
            utilInvariant.invariant(isString(opts.cadence), "query({ cadence }) -- cadence must be a string");
            _context2.t0 = utilInvariant.invariant;
            _context2.next = 5;
            return sdk__namespace.config.get("accessNode.api");

          case 5:
            _context2.t1 = _context2.sent;
            _context2.t2 = "Required value for \"accessNode.api\" not defined in config. See: ".concat("https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration");
            (0, _context2.t0)(_context2.t1, _context2.t2);

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _preQuery.apply(this, arguments);
}

function fetchServices(_x, _x2) {
  return _fetchServices.apply(this, arguments);
}

function _fetchServices() {
  _fetchServices = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(servicesURL, code) {
    var url, resp, services, _iterator, _step, service;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(servicesURL == null || code == null)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", []);

          case 2:
            url = new URL(servicesURL);
            url.searchParams.append("code", code);
            _context.next = 6;
            return fetch(url, {
              method: "GET",
              headers: {
                "Content-Type": "application/json"
              }
            }).then(function (d) {
              return d.json();
            });

          case 6:
            resp = _context.sent;

            if (!Array.isArray(resp)) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", resp);

          case 9:
            // Backwards compatibility for First-Gen Wallet Providers
            services = []; // Convert authorizations into authz services

            if (Array.isArray(resp.authorizations)) {
              _iterator = _createForOfIteratorHelper__default["default"](resp.authorizations);

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  service = _step.value;
                  services.push(_objectSpread__default["default"]({
                    type: "authz",
                    keyId: resp.keyId
                  }, service));
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            } // Convert Provider info into an authn service


            if (resp.provider != null) {
              services.push(_objectSpread__default["default"]({
                type: "authn",
                id: "wallet-provider#authn"
              }, resp.provider));
            }

            return _context.abrupt("return", services);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchServices.apply(this, arguments);
}

function mergeServices() {
  var sx1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var sx2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  // TODO: Make this smarter
  return [].concat(_toConsumableArray__default["default"](sx1), _toConsumableArray__default["default"](sx2));
}

var SERVICE_PRAGMA = {
  f_type: "Service",
  f_vsn: "1.0.0"
};
var IDENTITY_PRAGMA = {
  f_type: "Identity",
  f_vsn: "1.0.0"
};
var USER_PRAGMA = {
  f_type: "USER",
  f_vsn: "1.0.0"
};
var POLLING_RESPONSE_PRAGMA = {
  f_type: "PollingResponse",
  f_vsn: "1.0.0"
};
var COMPOSITE_SIGNATURE_PRAGMA = {
  f_type: "CompositeSignature",
  f_vsn: "1.0.0"
};

//   "f_type": "Service",
//   "f_vsn": "1.0.0",
//   "type": "authn",
//   "uid": "uniqueDedupeKey",
//   "endpoint": "https://rawr",
//   "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", // wallets internal id for the user
//   "identity": {
//     "address": "0x____"
//   },
//   "provider": {
//     "address": "0x____",
//     "name": "Best Wallet",
//     "description": "The Best Wallet"
//     "icon": "https://",
//   }
// }

function normalizeAuthn(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, SERVICE_PRAGMA), {}, {
        type: service.type,
        uid: service.id,
        endpoint: service.authn,
        id: service.pid,
        provider: {
          address: utilAddress.withPrefix(service.addr),
          name: service.name,
          icon: service.icon
        }
      });
  }
}

//   "f_type": "service",
//   "f_vsn": "1.0.0",
//   "type": "authz",
//   "uid": "uniqueDedupeKey",
//   "endpoint": "https://rawr",
//   "method": "HTTP/POST", // HTTP/POST | IFRAME/RPC | HTTP/RPC
//   "identity": {
//      "address": "0x______",
//      "keyId": 0,
//   },
//   "data": {}, // included in body of authz request
//   "params": {}, // included as query params on endpoint url
// }

function normalizeAuthz(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, SERVICE_PRAGMA), {}, {
        type: service.type,
        uid: service.id,
        endpoint: service.endpoint,
        method: service.method,
        identity: _objectSpread__default["default"](_objectSpread__default["default"]({}, IDENTITY_PRAGMA), {}, {
          address: utilAddress.withPrefix(service.addr),
          keyId: service.keyId
        }),
        params: service.params,
        data: service.data
      });
  }
}

//   "f_type": "service",
//   "f_vsn": "1.0.0",
//   "type": "pre-authz",
//   "uid": "uniqueDedupeKey",
//   "endpoint": "https://rawr",
//   "method": "HTTP/POST", // HTTP/POST | IFRAME/RPC | HTTP/RPC
//   "identity": {
//      "address": "0x______",
//      "keyId": 0,
//   },
//   "data": {}, // included in body of pre-authz request
//   "params": {}, // included as query params on endpoint url
// }

function normalizePreAuthz(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, SERVICE_PRAGMA), {}, {
        type: service.type,
        uid: service.id,
        endpoint: service.endpoint,
        method: service.method,
        identity: _objectSpread__default["default"](_objectSpread__default["default"]({}, IDENTITY_PRAGMA), {}, {
          address: utilAddress.withPrefix(service.addr),
          keyId: service.keyId
        }),
        params: service.params,
        data: service.data
      });
  }
}

//    "f_type": "Service",
//    "f_vsn": "1.0.0",
//    "type": "frame",
//    "endpoint": "https://rawr",
//    "data": {},   // Sent to frame when ready
//    "params": {}, // include in query params on frame
// }

function normalizeFrame(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({
        old: service
      }, SERVICE_PRAGMA), {}, {
        type: "frame",
        endpoint: service.endpoint,
        params: service.params || {},
        data: service.data || {}
      });
  }
}

//    "f_type": "Service",
//    "f_vsn": "1.0.0",
//    "type": "back-channel-rpc",
//    "endpoint": "https://rawr",
//    "method": "HTTP/GET", // HTTP/GET | HTTP/POST
//    "data": {},           // included in body of rpc
//    "params": {},         // included as query params on endpoint url
// }

function normalizeBackChannelRpc(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, SERVICE_PRAGMA), {}, {
        type: "back-channel-rpc",
        endpoint: service.endpoint,
        method: service.method,
        params: service.params || {},
        data: service.data || {}
      });
  }
}

//   "f_type": "Service",
//   "f_vsn": "1.0.0",
//   "type": "open-id",
//   "uid": "uniqueDedupeKey",
//   "method: "data",
//   "data": {
//      "profile": {
//        "name": "Bob",
//        "family_name": "Builder",
//        "given_name": "Robert",
//        "middle_name": "the",
//        "nickname": "Bob the Builder",
//        "perferred_username": "bob",
//        "profile": "https://www.bobthebuilder.com/",
//        "picture": "https://avatars.onflow.org/avatar/bob",
//        "gender": "...",
//        "birthday": "2001-01-18",
//        "zoneinfo": "America/Vancouver",
//        "locale": "en-us",
//        "updated_at": "1614970797388"
//      },
//      "email": {
//        "email": "bob@bob.bob",
//        "email_verified": true
//      },
//      "address": {
//        "address": "One Apple Park Way, Cupertino, CA 95014, USA"
//      },
//      "phone": {
//        "phone_number": "+1 (xxx) yyy-zzzz",
//        "phone_number_verified": true
//      },
//      "social": {
//        "twitter": "@_qvvg",
//        "twitter_verified": true
//      },
//   }
// }

function normalizeOpenId(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      return null;
  }
}

// {
//   "f_type": "Service",
//   "f_vsn": "1.0.0",
//   "type": "user-signature",
//   "uid": "uniqueDedupeKey",
//   "endpoint": "https://rawr",
//   "method": "IFRAME/RPC", // HTTP/POST | IFRAME/RPC | HTTP/RPC
//   "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", // wallets internal id for the user
//   "data": {}, // included in body of user-signature request
//   "params": {}, // included as query params on endpoint url
// }
function normalizeUserSignature(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      throw new Error("Invalid user-signature service");
  }
}

//    "f_type": "Service",
//    "f_vsn": "1.0.0",
//    type: "local-view",
//    method: "VIEW/IFRAME",
//    endpoint: "https://woot.org/authz/local",
//    data: {},
//    params: {},
// }

function normalizeLocalView(resp) {
  if (resp == null) return null;

  if (resp.method == null) {
    resp = _objectSpread__default["default"](_objectSpread__default["default"]({}, resp), {}, {
      type: "local-view",
      method: "VIEW/IFRAME"
    });
  }

  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, SERVICE_PRAGMA), {}, {
        type: resp.type || "local-view",
        method: resp.method,
        endpoint: resp.endpoint,
        data: resp.data || {},
        params: resp.params || {}
      });
  }
}

// {
//   "f_type": "Service",                    // Its a service!
//   "f_vsn": "1.0.0",                       // Follows the v1.0.0 spec for the service
//   "type": "account-proof",                // the type of service it is
//   "method": "DATA",                       // Its data!
//   "uid": "awesome-wallet#account-proof",  // A unique identifier for the service
//   "data": {
//     "f_type": "account-proof",
//     "f_vsn": "1.0.0",
//     "nonce": "0A1BC2FF",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)
//     "address": "0xUSER",                  // The user's address (8 bytes, i.e 16 hex characters)
//     "signature": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)
// }
function normalizeAccountProof(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      throw new Error("FCL Normalizer Error: Invalid account-proof service");
  }
}

// {
//   "f_type": "Service",
//   "f_vsn": "1.0.0",
//   "type": "authn-refresh",
//   "uid": "uniqueDedupeKey",
//   "endpoint": "https://rawr",
//   "method": "HTTP/POST",  // "HTTP/POST", // HTTP/POST | IFRAME/RPC | HTTP/RPC
//   "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx", // wallets internal id for the user
//   "data": {}, // included in body of request
//   "params": {}, // included as query params on endpoint url
// }
function normalizeAuthnRefresh(service) {
  if (service == null) return null;

  switch (service["f_vsn"]) {
    case "1.0.0":
      return service;

    default:
      throw new Error("Invalid authn-refresh service");
  }
}

var serviceNormalizers = {
  "back-channel-rpc": normalizeBackChannelRpc,
  "pre-authz": normalizePreAuthz,
  authz: normalizeAuthz,
  authn: normalizeAuthn,
  frame: normalizeFrame,
  "open-id": normalizeOpenId,
  "user-signature": normalizeUserSignature,
  "local-view": normalizeLocalView,
  "account-proof": normalizeAccountProof,
  "authn-refresh": normalizeAuthnRefresh
};
function normalizeService(service, data) {
  try {
    var normalized = serviceNormalizers[service.type](service, data);
    return normalized;
  } catch (error) {
    console.error("Unrecognized FCL Service Type [".concat(service.type, "]"), service, error);
    return service;
  }
}

function deriveCompositeId(authn) {
  return rlp__namespace.encode([authn.provider.address || authn.provider.name || "UNSPECIFIED", authn.id]).toString("hex");
}

function normalizeData(data) {
  data.addr = data.addr ? utilAddress.withPrefix(data.addr) : null;
  data.paddr = data.paddr ? utilAddress.withPrefix(data.paddr) : null;
  return data;
}

function findService(type, services) {
  return services.find(function (d) {
    return d.type === type;
  });
}

function buildUser(_x) {
  return _buildUser.apply(this, arguments);
}

function _buildUser() {
  _buildUser = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(data) {
    var services, authn;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            data = normalizeData(data);
            _context.t0 = mergeServices;
            _context.t1 = data.services || [];
            _context.next = 5;
            return fetchServices(data.hks, data.code);

          case 5:
            _context.t2 = _context.sent;
            services = (0, _context.t0)(_context.t1, _context.t2).map(function (service) {
              return normalizeService(service, data);
            });
            authn = findService("authn", services);
            return _context.abrupt("return", _objectSpread__default["default"](_objectSpread__default["default"]({}, USER_PRAGMA), {}, {
              addr: utilAddress.withPrefix(data.addr),
              cid: deriveCompositeId(authn),
              loggedIn: true,
              services: services,
              expiresAt: data.expires
            }));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _buildUser.apply(this, arguments);
}

function serviceOfType() {
  var services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var type = arguments.length > 1 ? arguments[1] : undefined;
  return services.find(function (service) {
    return service.type === type;
  });
}

function serviceEndpoint(service) {
  var url = new URL(service.endpoint);
  url.searchParams.append("l6n", window.location.origin);

  if (service.params != null) {
    for (var _i = 0, _Object$entries = Object.entries(service.params || {}); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray__default["default"](_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];

      url.searchParams.append(key, value);
    }
  }

  return url;
}

function fetchService(service) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var method = opts.method || "POST";
  var body = method === "GET" ? undefined : JSON.stringify(opts.data || service.data || {});
  return fetch(serviceEndpoint(service), {
    method: method,
    headers: _objectSpread__default["default"](_objectSpread__default["default"](_objectSpread__default["default"]({}, service.headers || {}), opts.headers || {}), {}, {
      "Content-Type": "application/json"
    }),
    body: body
  }).then(function (d) {
    return d.json();
  });
}

//    "f_type": "PollingResponse",
//    "f_vsn": "1.0.0",
//    "status": "PENDING", // PENDING | APPROVED | DECLINED | REDIRECT
//    "reason": null,      // Reason for Declining Transaction
//    "data": null,        // Return value for APPROVED
//    "updates": BackChannelRpc,
//    "local": Frame,
// }

function normalizePollingResponse(resp) {
  var _resp$status, _resp$reason;

  if (resp == null) return null;

  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, POLLING_RESPONSE_PRAGMA), {}, {
        status: (_resp$status = resp.status) !== null && _resp$status !== void 0 ? _resp$status : "APPROVED",
        reason: (_resp$reason = resp.reason) !== null && _resp$reason !== void 0 ? _resp$reason : null,
        data: resp.compositeSignature || resp.data || _objectSpread__default["default"]({}, resp) || {},
        updates: normalizeBackChannelRpc(resp.authorizationUpdates),
        local: normalizeFrame((resp.local || [])[0])
      });
  }
}

var OPTIONS = {
  "HTTP/GET": "GET",
  "HTTP/POST": "POST"
};

var serviceMethod = function serviceMethod(service) {
  utilInvariant.invariant(OPTIONS[service.method], "Invalid Service Method for type back-channel-rpc", {
    service: service
  });
  return OPTIONS[service.method];
};

function poll(_x) {
  return _poll.apply(this, arguments);
}

function _poll() {
  _poll = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(service) {
    var canContinue,
        resp,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            canContinue = _args.length > 1 && _args[1] !== undefined ? _args[1] : function () {
              return true;
            };
            utilInvariant.invariant(service, "Missing Polling Service", {
              service: service
            });

            if (canContinue()) {
              _context.next = 4;
              break;
            }

            throw new Error("Externally Halted");

          case 4:
            _context.next = 6;
            return fetchService(service, {
              method: serviceMethod(service)
            }).then(normalizePollingResponse);

          case 6:
            resp = _context.sent;
            _context.t0 = resp.status;
            _context.next = _context.t0 === "APPROVED" ? 10 : _context.t0 === "DECLINED" ? 11 : 12;
            break;

          case 10:
            return _context.abrupt("return", resp.data);

          case 11:
            throw new Error("Declined: ".concat(resp.reason || "No reason supplied."));

          case 12:
            _context.next = 14;
            return new Promise(function (r) {
              return setTimeout(r, 500);
            });

          case 14:
            return _context.abrupt("return", poll(resp.updates, canContinue));

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _poll.apply(this, arguments);
}

var FRAME = "FCL_IFRAME";
var FRAME_STYLES = "\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n";
function renderFrame(src) {
  utilInvariant.invariant(!document.getElementById(FRAME), "Attempt at triggering multiple Frames", {
    src: src
  });
  var $frame = document.createElement("iframe");
  $frame.src = src;
  $frame.id = FRAME;
  $frame.allow = "usb *; hid *";
  $frame.frameBorder = "0";
  $frame.style.cssText = FRAME_STYLES;
  document.body.append($frame);

  var unmount = function unmount() {
    if (document.getElementById(FRAME)) {
      document.getElementById(FRAME).remove();
    }
  };

  return [$frame.contentWindow, unmount];
}

var POP = "FCL_POP";
var popup = null;
var previousUrl$1 = null;

function popupWindow(url, windowName, win, w, h) {
  var y = win.top.outerHeight / 2 + win.top.screenY - h / 2;
  var x = win.top.outerWidth / 2 + win.top.screenX - w / 2;
  var popup = win.open(url, windowName, "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=".concat(w, ", height=").concat(h, ", top=").concat(y, ", left=").concat(x));
  if (!popup) throw new Error("Popup failed to open (was it blocked by a popup blocker?)");
  return popup;
}

function renderPop(src) {
  var _popup;

  if (popup == null || (_popup = popup) !== null && _popup !== void 0 && _popup.closed) {
    popup = popupWindow(src, POP, window, 640, 770);
  } else if (previousUrl$1 !== src) {
    popup.location.replace(src);
    popup.focus();
  } else {
    popup.focus();
  }

  previousUrl$1 = src;

  var unmount = function unmount() {
    if (popup && !popup.closed) {
      popup.close();
    }

    popup = null;
  };

  return [popup, unmount];
}

var tab$1 = null;
var previousUrl = null;
function renderTab(src) {
  var _tab;

  if (tab$1 == null || (_tab = tab$1) !== null && _tab !== void 0 && _tab.closed) {
    tab$1 = window.open(src, "_blank");
    if (!tab$1) throw new Error("Tab failed to open (was it blocked by the browser?)");
  } else if (previousUrl !== src) {
    tab$1.location.replace(src);
    tab$1.focus();
  } else {
    tab$1.focus();
  }

  previousUrl = src;

  var unmount = function unmount() {
    if (tab$1 && !tab$1.closed) {
      tab$1.close();
    }

    tab$1 = null;
  };

  return [tab$1, unmount];
}

var VIEWS = {
  "VIEW/IFRAME": renderFrame,
  "VIEW/POP": renderPop,
  "VIEW/TAB": renderTab
};
function execLocal(_x) {
  return _execLocal.apply(this, arguments);
}

function _execLocal() {
  _execLocal = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(service) {
    var opts,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            _context.prev = 1;
            return _context.abrupt("return", VIEWS[service.method](serviceEndpoint(service), opts));

          case 5:
            _context.prev = 5;
            _context.t0 = _context["catch"](1);
            console.error("execLocal({service, opts = {}})", _context.t0, {
              service: service,
              opts: opts
            });
            throw _context.t0;

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 5]]);
  }));
  return _execLocal.apply(this, arguments);
}

function execHttpPost(_x, _x2, _x3, _x4) {
  return _execHttpPost.apply(this, arguments);
}

function _execHttpPost() {
  _execHttpPost = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(service, signable, opts, config) {
    var resp, canContinue, _yield$execLocal, _yield$execLocal2, unmount, close;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetchService(service, {
              data: _objectSpread__default["default"]({
                fclVersion: VERSION,
                service: {
                  params: service.params,
                  data: service.data,
                  type: service.type
                },
                config: config
              }, signable)
            }).then(normalizePollingResponse);

          case 2:
            resp = _context.sent;

            if (!(resp.status === "APPROVED")) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", resp.data);

          case 7:
            if (!(resp.status === "DECLINED")) {
              _context.next = 11;
              break;
            }

            throw new Error("Declined: ".concat(resp.reason || "No reason supplied."));

          case 11:
            if (!(resp.status === "REDIRECT")) {
              _context.next = 15;
              break;
            }

            return _context.abrupt("return", resp);

          case 15:
            if (!(resp.status === "PENDING")) {
              _context.next = 27;
              break;
            }

            canContinue = true;
            _context.next = 19;
            return execLocal(normalizeLocalView(resp.local));

          case 19:
            _yield$execLocal = _context.sent;
            _yield$execLocal2 = _slicedToArray__default["default"](_yield$execLocal, 2);
            _yield$execLocal2[0];
            unmount = _yield$execLocal2[1];

            close = function close() {
              try {
                unmount();
                canContinue = false;
              } catch (error) {
                console.error("Frame Close Error", error);
              }
            };

            return _context.abrupt("return", poll(resp.updates, function () {
              return canContinue;
            }).then(function (serviceResponse) {
              close();
              return serviceResponse;
            })["catch"](function (error) {
              console.error(error);
              close();
              throw error;
            }));

          case 27:
            console.error("Auto Decline: Invalid Response", {
              service: service,
              resp: resp
            });
            throw new Error("Auto Decline: Invalid Response");

          case 29:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _execHttpPost.apply(this, arguments);
}

var CLOSE_EVENT = "FCL:VIEW:CLOSE";
var READY_EVENT = "FCL:VIEW:READY";
var RESPONSE_EVENT = "FCL:VIEW:RESPONSE";

var _ = function _(e) {
  return typeof e === "string" && e.toLowerCase();
};

var IGNORE = new Set(["monetizationstart", "monetizationpending", "monetizationprogress", "monetizationstop"]);

var deprecate = function deprecate(was, want) {
  return console.warn("DEPRECATION NOTICE", "Received ".concat(was, ", please use ").concat(want, " for this and future versions of FCL"));
};

var buildMessageHandler = function buildMessageHandler(_ref) {
  var close = _ref.close,
      send = _ref.send,
      onReady = _ref.onReady,
      onResponse = _ref.onResponse,
      onMessage = _ref.onMessage;
  return function (e) {
    try {
      if (_typeof__default["default"](e.data) !== "object") return;
      if (IGNORE.has(e.data.type)) return;
      if (_(e.data.type) === _(CLOSE_EVENT)) close();
      if (_(e.data.type) === _(READY_EVENT)) onReady(e, {
        send: send,
        close: close
      });
      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {
        send: send,
        close: close
      });
      onMessage(e, {
        send: send,
        close: close
      }); // Backwards Compatible

      if (_(e.data.type) === _("FCL:FRAME:READY")) {
        deprecate(e.data.type, READY_EVENT);
        onReady(e, {
          send: send,
          close: close
        });
      }

      if (_(e.data.type) === _("FCL:FRAME:RESPONSE")) {
        deprecate(e.data.type, RESPONSE_EVENT);
        onResponse(e, {
          send: send,
          close: close
        });
      }

      if (_(e.data.type) === _("FCL:FRAME:CLOSE")) {
        deprecate(e.data.type, CLOSE_EVENT);
        close();
      } //


      if (_(e.data.type) === _("FCL::CHALLENGE::RESPONSE")) {
        deprecate(e.data.type, RESPONSE_EVENT);
        onResponse(e, {
          send: send,
          close: close
        });
      }

      if (_(e.data.type) === _("FCL::AUTHZ_READY")) {
        deprecate(e.data.type, READY_EVENT);
        onReady(e, {
          send: send,
          close: close
        });
      }

      if (_(e.data.type) === _("FCL::CHALLENGE::CANCEL")) {
        deprecate(e.data.type, CLOSE_EVENT);
        close();
      }

      if (_(e.data.type) === _("FCL::CANCEL")) {
        deprecate(e.data.type, CLOSE_EVENT);
        close();
      }
    } catch (error) {
      console.error("Frame Callback Error", error);
      close();
    }
  };
};

var noop$3 = function noop() {};

function frame(service) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (service == null) return {
    send: noop$3,
    close: noop$3
  };
  var onClose = opts.onClose || noop$3;
  var onMessage = opts.onMessage || noop$3;
  var onReady = opts.onReady || noop$3;
  var onResponse = opts.onResponse || noop$3;
  var handler = buildMessageHandler({
    close: close,
    send: send,
    onReady: onReady,
    onResponse: onResponse,
    onMessage: onMessage
  });
  window.addEventListener("message", handler);

  var _renderFrame = renderFrame(serviceEndpoint(service)),
      _renderFrame2 = _slicedToArray__default["default"](_renderFrame, 2),
      $frame = _renderFrame2[0],
      unmount = _renderFrame2[1];

  return {
    send: send,
    close: close
  };

  function close() {
    try {
      window.removeEventListener("message", handler);
      unmount();
      onClose();
    } catch (error) {
      console.error("Frame Close Error", error);
    }
  }

  function send(msg) {
    try {
      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Frame Send Error", msg, error);
    }
  }
}

function execIframeRPC(service, body, opts, config) {
  return new Promise(function (resolve, reject) {
    var id = utilUid.uid();
    var includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;
    frame(service, {
      onReady: function onReady(_, _ref) {
        return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
          var send;
          return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  send = _ref.send;
                  _context.prev = 1;
                  send({
                    type: "FCL:VIEW:READY:RESPONSE",
                    fclVersion: VERSION,
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config
                  });
                  send({
                    fclVersion: VERSION,
                    type: "FCL:FRAME:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config,
                    deprecated: {
                      message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
                    }
                  });

                  if (includeOlderJsonRpcCall) {
                    send({
                      jsonrpc: "2.0",
                      id: id,
                      method: "fcl:sign",
                      params: [body, service.params],
                      deprecated: {
                        message: "jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
                      }
                    });
                  }

                  _context.next = 10;
                  break;

                case 7:
                  _context.prev = 7;
                  _context.t0 = _context["catch"](1);
                  throw _context.t0;

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 7]]);
        }))();
      },
      onResponse: function onResponse(e, _ref2) {
        var close = _ref2.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          var resp = normalizePollingResponse(e.data);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execIframeRPC onResponse error", error);
          throw error;
        }
      },
      onMessage: function onMessage(e, _ref3) {
        var close = _ref3.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          if (e.data.jsonrpc !== "2.0") return;
          if (e.data.id !== id) return;
          var resp = normalizePollingResponse(e.data.result);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execIframeRPC onMessage error", error);
          throw error;
        }
      },
      onClose: function onClose() {
        reject("Declined: Externally Halted");
      }
    });
  });
}

var noop$2 = function noop() {};

function pop(service) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (service == null) return {
    send: noop$2,
    close: noop$2
  };
  var onClose = opts.onClose || noop$2;
  var onMessage = opts.onMessage || noop$2;
  var onReady = opts.onReady || noop$2;
  var onResponse = opts.onResponse || noop$2;
  var handler = buildMessageHandler({
    close: close,
    send: send,
    onReady: onReady,
    onResponse: onResponse,
    onMessage: onMessage
  });
  window.addEventListener("message", handler);

  var _renderPop = renderPop(serviceEndpoint(service)),
      _renderPop2 = _slicedToArray__default["default"](_renderPop, 2),
      $pop = _renderPop2[0],
      unmount = _renderPop2[1];

  var timer = setInterval(function () {
    if ($pop && $pop.closed) {
      close();
    }
  }, 500);
  return {
    send: send,
    close: close
  };

  function close() {
    try {
      window.removeEventListener("message", handler);
      clearInterval(timer);
      unmount();
      onClose();
    } catch (error) {
      console.error("Popup Close Error", error);
    }
  }

  function send(msg) {
    try {
      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Popup Send Error", msg, error);
    }
  }
}

function execPopRPC(service, body, opts, config) {
  return new Promise(function (resolve, reject) {
    var id = utilUid.uid();
    var redir = opts.redir,
        includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;
    pop(service, {
      onReady: function onReady(_, _ref) {
        return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
          var send;
          return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  send = _ref.send;
                  _context.prev = 1;
                  send({
                    fclVersion: VERSION,
                    type: "FCL:VIEW:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config
                  });
                  send({
                    fclVersion: VERSION,
                    type: "FCL:FRAME:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config,
                    deprecated: {
                      message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
                    }
                  });

                  if (includeOlderJsonRpcCall) {
                    send({
                      jsonrpc: "2.0",
                      id: id,
                      method: "fcl:sign",
                      params: [body, service.params]
                    });
                  }

                  _context.next = 10;
                  break;

                case 7:
                  _context.prev = 7;
                  _context.t0 = _context["catch"](1);
                  throw _context.t0;

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 7]]);
        }))();
      },
      onResponse: function onResponse(e, _ref2) {
        var close = _ref2.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          var resp = normalizePollingResponse(e.data);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              !redir && close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onResponse error", error);
          throw error;
        }
      },
      onMessage: function onMessage(e, _ref3) {
        var close = _ref3.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          if (e.data.jsonrpc !== "2.0") return;
          if (e.data.id !== id) return;
          var resp = normalizePollingResponse(e.data.result);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              !redir && close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onMessage error", error);
          throw error;
        }
      },
      onClose: function onClose() {
        reject("Declined: Externally Halted");
      }
    });
  });
}

var noop$1 = function noop() {};

function tab(service) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (service == null) return {
    send: noop$1,
    close: noop$1
  };
  var onClose = opts.onClose || noop$1;
  var onMessage = opts.onMessage || noop$1;
  var onReady = opts.onReady || noop$1;
  var onResponse = opts.onResponse || noop$1;
  var handler = buildMessageHandler({
    close: close,
    send: send,
    onReady: onReady,
    onResponse: onResponse,
    onMessage: onMessage
  });
  window.addEventListener("message", handler);

  var _renderTab = renderTab(serviceEndpoint(service)),
      _renderTab2 = _slicedToArray__default["default"](_renderTab, 2),
      $tab = _renderTab2[0],
      unmount = _renderTab2[1];

  var timer = setInterval(function () {
    if ($tab && $tab.closed) {
      close();
    }
  }, 500);
  return {
    send: send,
    close: close
  };

  function close() {
    try {
      window.removeEventListener("message", handler);
      clearInterval(timer);
      unmount();
      onClose();
    } catch (error) {
      console.error("Tab Close Error", error);
    }
  }

  function send(msg) {
    try {
      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Tab Send Error", msg, error);
    }
  }
}

function execTabRPC(service, body, opts, config) {
  return new Promise(function (resolve, reject) {
    var id = utilUid.uid();
    var redir = opts.redir,
        includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall;
    tab(service, {
      onReady: function onReady(_, _ref) {
        return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
          var send;
          return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  send = _ref.send;
                  _context.prev = 1;
                  send({
                    fclVersion: VERSION,
                    type: "FCL:VIEW:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config
                  });
                  send({
                    fclVersion: VERSION,
                    type: "FCL:FRAME:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config,
                    deprecated: {
                      message: "FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE"
                    }
                  });

                  if (includeOlderJsonRpcCall) {
                    send({
                      jsonrpc: "2.0",
                      id: id,
                      method: "fcl:sign",
                      params: [body, service.params]
                    });
                  }

                  _context.next = 10;
                  break;

                case 7:
                  _context.prev = 7;
                  _context.t0 = _context["catch"](1);
                  throw _context.t0;

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 7]]);
        }))();
      },
      onResponse: function onResponse(e, _ref2) {
        var close = _ref2.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          var resp = normalizePollingResponse(e.data);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              !redir && close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onResponse error", error);
          throw error;
        }
      },
      onMessage: function onMessage(e, _ref3) {
        var close = _ref3.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          if (e.data.jsonrpc !== "2.0") return;
          if (e.data.id !== id) return;
          var resp = normalizePollingResponse(e.data.result);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              !redir && close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execPopRPC onMessage error", error);
          throw error;
        }
      },
      onClose: function onClose() {
        reject("Declined: Externally Halted");
      }
    });
  });
}

var noop = function noop() {};

function extension(service) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (service == null) return {
    send: noop,
    close: noop
  };
  var onClose = opts.onClose || noop;
  var onMessage = opts.onMessage || noop;
  var onReady = opts.onReady || noop;
  var onResponse = opts.onResponse || noop;
  var handler = buildMessageHandler({
    close: close,
    send: send,
    onReady: onReady,
    onResponse: onResponse,
    onMessage: onMessage
  });
  window.addEventListener("message", handler);
  send({
    service: service
  });
  return {
    send: send,
    close: close
  };

  function close() {
    try {
      window.removeEventListener("message", handler);
      onClose();
    } catch (error) {
      console.error("Ext Close Error", error);
    }
  }

  function send(msg) {
    try {
      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), "*");
    } catch (error) {
      console.error("Ext Send Error", msg, error);
    }
  }
}

function execExtRPC(service, body, opts, config) {
  return new Promise(function (resolve, reject) {
    extension(service, {
      onReady: function onReady(_, _ref) {
        return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
          var send;
          return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  send = _ref.send;
                  _context.prev = 1;
                  send({
                    fclVersion: VERSION,
                    type: "FCL:VIEW:READY:RESPONSE",
                    body: body,
                    service: {
                      params: service.params,
                      data: service.data,
                      type: service.type
                    },
                    config: config
                  });
                  _context.next = 8;
                  break;

                case 5:
                  _context.prev = 5;
                  _context.t0 = _context["catch"](1);
                  throw _context.t0;

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[1, 5]]);
        }))();
      },
      onResponse: function onResponse(e, _ref2) {
        var close = _ref2.close;

        try {
          if (_typeof__default["default"](e.data) !== "object") return;
          var resp = normalizePollingResponse(e.data);

          switch (resp.status) {
            case "APPROVED":
              resolve(resp.data);
              close();
              break;

            case "DECLINED":
              reject("Declined: ".concat(resp.reason || "No reason supplied"));
              close();
              break;

            case "REDIRECT":
              resolve(resp);
              close();
              break;

            default:
              reject("Declined: No reason supplied");
              close();
              break;
          }
        } catch (error) {
          console.error("execExtRPC onResponse error", error);
          throw error;
        }
      },
      onClose: function onClose() {
        reject("Declined: Externally Halted");
      }
    });
  });
}

var STRATEGIES = {
  "HTTP/RPC": execHttpPost,
  "HTTP/POST": execHttpPost,
  "IFRAME/RPC": execIframeRPC,
  "POP/RPC": execPopRPC,
  "TAB/RPC": execTabRPC,
  "EXT/RPC": execExtRPC
};
function execService(_x) {
  return _execService.apply(this, arguments);
}

function _execService() {
  _execService = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(_ref) {
    var _window$location$host, _window, _window$location, _window2;

    var service, _ref$msg, msg, _ref$opts, opts, _ref$config, config, fullConfig, res;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            service = _ref.service, _ref$msg = _ref.msg, msg = _ref$msg === void 0 ? {} : _ref$msg, _ref$opts = _ref.opts, opts = _ref$opts === void 0 ? {} : _ref$opts, _ref$config = _ref.config, config = _ref$config === void 0 ? {} : _ref$config;
            msg.data = service.data;
            _context.t0 = _objectSpread__default["default"];
            _context.t1 = _objectSpread__default["default"]({}, config);
            _context.t2 = {};
            _context.next = 7;
            return configLens(/^service\./);

          case 7:
            _context.t3 = _context.sent;
            _context.next = 10;
            return configLens(/^app\.detail\./);

          case 10:
            _context.t4 = _context.sent;
            _context.t5 = {
              fclVersion: VERSION,
              fclLibrary: "https://github.com/onflow/fcl-js",
              hostname: (_window$location$host = (_window = window) === null || _window === void 0 ? void 0 : (_window$location = _window.location) === null || _window$location === void 0 ? void 0 : _window$location.hostname) !== null && _window$location$host !== void 0 ? _window$location$host : null,
              extensions: ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.fcl_extensions) || []
            };
            _context.t6 = {
              services: _context.t3,
              app: _context.t4,
              client: _context.t5
            };
            fullConfig = (0, _context.t0)(_context.t1, _context.t2, _context.t6);
            _context.prev = 14;
            _context.next = 17;
            return STRATEGIES[service.method](service, msg, opts, fullConfig);

          case 17:
            res = _context.sent;

            if (!(res.status === "REDIRECT")) {
              _context.next = 25;
              break;
            }

            utilInvariant.invariant(service.type === res.data.type, "Cannot shift recursive service type in execService");
            _context.next = 22;
            return execService({
              service: res.data,
              msg: msg,
              opts: opts,
              config: fullConfig
            });

          case 22:
            return _context.abrupt("return", _context.sent);

          case 25:
            return _context.abrupt("return", res);

          case 26:
            _context.next = 32;
            break;

          case 28:
            _context.prev = 28;
            _context.t7 = _context["catch"](14);
            console.error("execService({service, msg = {}, opts = {}, config = {}})", _context.t7, {
              service: service,
              msg: msg,
              opts: opts,
              config: config
            });
            throw _context.t7;

          case 32:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[14, 28]]);
  }));
  return _execService.apply(this, arguments);
}

//    "f_type": "CompositeSignature",
//    "f_vsn": "1.0.0",
//    "addr": "_____",         // sans-prefix
//    "signature": "adfe1234", // hex
//    "keyId": 3,
// }

function normalizeCompositeSignature(resp) {
  if (resp == null) return null;

  switch (resp["f_vsn"]) {
    case "1.0.0":
      return resp;

    default:
      return _objectSpread__default["default"](_objectSpread__default["default"]({}, COMPOSITE_SIGNATURE_PRAGMA), {}, {
        addr: utilAddress.sansPrefix(resp.addr || resp.address),
        signature: resp.signature || resp.sig,
        keyId: resp.keyId
      });
  }
}

var _HANDLERS$3;
var isFn = function isFn(d) {
  return typeof d === "function";
};
var NAME = "CURRENT_USER";
var UPDATED$1 = "CURRENT_USER/UPDATED";
var SNAPSHOT = "SNAPSHOT";
var SET_CURRENT_USER = "SET_CURRENT_USER";
var DEL_CURRENT_USER = "DEL_CURRENT_USER";
var DATA = "{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}";

var getStoredUser = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(storage) {
    var fallback, stored;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fallback = JSON.parse(DATA);
            _context.next = 3;
            return storage.get(NAME);

          case 3:
            stored = _context.sent;

            if (!(stored != null && fallback["f_vsn"] !== stored["f_vsn"])) {
              _context.next = 7;
              break;
            }

            storage.removeItem(NAME);
            return _context.abrupt("return", fallback);

          case 7:
            return _context.abrupt("return", stored || fallback);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getStoredUser(_x) {
    return _ref.apply(this, arguments);
  };
}();

var HANDLERS$3 = (_HANDLERS$3 = {}, _defineProperty__default["default"](_HANDLERS$3, utilActor.INIT, function () {
  var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ctx) {
    var storage, user;
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (typeof window === "undefined") {
              console.warn("\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        ", "font-weight:bold;font-family:monospace;");
            }

            ctx.merge(JSON.parse(DATA));
            _context2.next = 4;
            return config.config.first(["fcl.storage", "fcl.storage.default"]);

          case 4:
            storage = _context2.sent;

            if (!storage.can) {
              _context2.next = 10;
              break;
            }

            _context2.next = 8;
            return getStoredUser(storage);

          case 8:
            user = _context2.sent;
            if (notExpired(user)) ctx.merge(user);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$3, utilActor.SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, UPDATED$1, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS$3, utilActor.UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);
}), _defineProperty__default["default"](_HANDLERS$3, SNAPSHOT, function () {
  var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ctx, letter) {
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            letter.reply(_objectSpread__default["default"]({}, ctx.all()));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$3, SET_CURRENT_USER, function () {
  var _ref4 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(ctx, letter, data) {
    var storage;
    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            ctx.merge(data);
            _context4.next = 3;
            return config.config.first(["fcl.storage", "fcl.storage.default"]);

          case 3:
            storage = _context4.sent;
            if (storage.can) storage.put(NAME, ctx.all());
            ctx.broadcast(UPDATED$1, _objectSpread__default["default"]({}, ctx.all()));

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x5, _x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$3, DEL_CURRENT_USER, function () {
  var _ref5 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee5(ctx, letter) {
    var storage;
    return _regeneratorRuntime__default["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            ctx.merge(JSON.parse(DATA));
            _context5.next = 3;
            return config.config.first(["fcl.storage", "fcl.storage.default"]);

          case 3:
            storage = _context5.sent;
            if (storage.can) storage.put(NAME, ctx.all());
            ctx.broadcast(UPDATED$1, _objectSpread__default["default"]({}, ctx.all()));

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function (_x8, _x9) {
    return _ref5.apply(this, arguments);
  };
}()), _HANDLERS$3);

var spawnCurrentUser = function spawnCurrentUser() {
  return utilActor.spawn(HANDLERS$3, NAME);
};

function notExpired(user) {
  return user.expiresAt == null || user.expiresAt === 0 || user.expiresAt > Date.now();
}

function getAccountProofData() {
  return _getAccountProofData.apply(this, arguments);
} // Certain method types cannot be overridden to use other methods like POP/RCP


function _getAccountProofData() {
  _getAccountProofData = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee7() {
    var accountProofDataResolver, accountProofData;
    return _regeneratorRuntime__default["default"].wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return config.config.get("fcl.accountProof.resolver");

          case 2:
            accountProofDataResolver = _context7.sent;

            if (isFn(accountProofDataResolver)) {
              _context7.next = 5;
              break;
            }

            return _context7.abrupt("return");

          case 5:
            _context7.next = 7;
            return accountProofDataResolver();

          case 7:
            accountProofData = _context7.sent;

            if (!(accountProofData == null)) {
              _context7.next = 10;
              break;
            }

            return _context7.abrupt("return");

          case 10:
            utilInvariant.invariant(typeof accountProofData.appIdentifier === "string", "appIdentifier must be a string");
            utilInvariant.invariant(/^[0-9a-f]+$/i.test(accountProofData.nonce), "Nonce must be a hex string");
            return _context7.abrupt("return", accountProofData);

          case 13:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _getAccountProofData.apply(this, arguments);
}

var isServiceMethodUnchangable = function isServiceMethodUnchangable(method) {
  return ["EXT/RPC"].includes(method);
};

function authenticate$1() {
  return _authenticate.apply(this, arguments);
}

function _authenticate() {
  _authenticate = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee9() {
    var _service$provider, _service$provider2;

    var _ref9,
        service,
        _ref9$redir,
        redir,
        _service$provider3,
        _args9 = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _ref9 = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {}, service = _ref9.service, _ref9$redir = _ref9.redir, redir = _ref9$redir === void 0 ? false : _ref9$redir;

            if (!(service && !(service !== null && service !== void 0 && (_service$provider = service.provider) !== null && _service$provider !== void 0 && _service$provider.is_installed) && service !== null && service !== void 0 && (_service$provider2 = service.provider) !== null && _service$provider2 !== void 0 && _service$provider2.requires_install)) {
              _context9.next = 4;
              break;
            }

            window.location.href = service === null || service === void 0 ? void 0 : (_service$provider3 = service.provider) === null || _service$provider3 === void 0 ? void 0 : _service$provider3.install_link;
            return _context9.abrupt("return");

          case 4:
            return _context9.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref10 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee8(resolve, reject) {
                var opts, user, discoveryService, refreshService, accountProofData, response, _response;

                return _regeneratorRuntime__default["default"].wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        spawnCurrentUser();
                        opts = {
                          redir: redir
                        };
                        _context8.next = 4;
                        return snapshot();

                      case 4:
                        user = _context8.sent;
                        _context8.next = 7;
                        return getDiscoveryService();

                      case 7:
                        discoveryService = _context8.sent;
                        refreshService = serviceOfType(user.services, "authn-refresh");
                        _context8.prev = 9;
                        _context8.next = 12;
                        return getAccountProofData();

                      case 12:
                        accountProofData = _context8.sent;
                        _context8.next = 19;
                        break;

                      case 15:
                        _context8.prev = 15;
                        _context8.t0 = _context8["catch"](9);
                        console.error("Error During Authentication: Could not resolve account proof data.\n        ".concat(_context8.t0));
                        return _context8.abrupt("return", reject(_context8.t0));

                      case 19:
                        utilInvariant.invariant(service || discoveryService.endpoint, "\n        If no service passed to \"authenticate,\" then \"discovery.wallet\" must be defined in config.\n        See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n      ");

                        if (!user.loggedIn) {
                          _context8.next = 48;
                          break;
                        }

                        if (!refreshService) {
                          _context8.next = 47;
                          break;
                        }

                        _context8.prev = 22;
                        _context8.next = 25;
                        return execService({
                          service: refreshService,
                          msg: accountProofData,
                          opts: opts
                        });

                      case 25:
                        response = _context8.sent;
                        _context8.t1 = utilActor.send;
                        _context8.t2 = NAME;
                        _context8.t3 = SET_CURRENT_USER;
                        _context8.next = 31;
                        return buildUser(response);

                      case 31:
                        _context8.t4 = _context8.sent;
                        (0, _context8.t1)(_context8.t2, _context8.t3, _context8.t4);
                        _context8.next = 38;
                        break;

                      case 35:
                        _context8.prev = 35;
                        _context8.t5 = _context8["catch"](22);
                        console.error("Error: Could not refresh authentication.", _context8.t5);

                      case 38:
                        _context8.prev = 38;
                        _context8.t6 = resolve;
                        _context8.next = 42;
                        return snapshot();

                      case 42:
                        _context8.t7 = _context8.sent;
                        return _context8.abrupt("return", (0, _context8.t6)(_context8.t7));

                      case 45:
                        _context8.next = 48;
                        break;

                      case 47:
                        return _context8.abrupt("return", resolve(user));

                      case 48:
                        _context8.prev = 48;
                        _context8.next = 51;
                        return execService({
                          service: _objectSpread__default["default"](_objectSpread__default["default"]({}, service || discoveryService), {}, {
                            method: isServiceMethodUnchangable(service === null || service === void 0 ? void 0 : service.method) ? service.method : (discoveryService === null || discoveryService === void 0 ? void 0 : discoveryService.method) || service.method || "IFRAME/RPC"
                          }),
                          msg: accountProofData,
                          opts: opts,
                          config: {
                            discoveryAuthnInclude: discoveryService.discoveryAuthnInclude
                          }
                        });

                      case 51:
                        _response = _context8.sent;
                        _context8.t8 = utilActor.send;
                        _context8.t9 = NAME;
                        _context8.t10 = SET_CURRENT_USER;
                        _context8.next = 57;
                        return buildUser(_response);

                      case 57:
                        _context8.t11 = _context8.sent;
                        (0, _context8.t8)(_context8.t9, _context8.t10, _context8.t11);
                        _context8.next = 64;
                        break;

                      case 61:
                        _context8.prev = 61;
                        _context8.t12 = _context8["catch"](48);
                        console.error("Error while authenticating", _context8.t12);

                      case 64:
                        _context8.prev = 64;
                        _context8.t13 = resolve;
                        _context8.next = 68;
                        return snapshot();

                      case 68:
                        _context8.t14 = _context8.sent;
                        (0, _context8.t13)(_context8.t14);
                        return _context8.finish(64);

                      case 71:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, null, [[9, 15], [22, 35, 38, 45], [48, 61, 64, 71]]);
              }));

              return function (_x13, _x14) {
                return _ref10.apply(this, arguments);
              };
            }()));

          case 5:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _authenticate.apply(this, arguments);
}

function unauthenticate$1() {
  spawnCurrentUser();
  utilActor.send(NAME, DEL_CURRENT_USER);
}

var normalizePreAuthzResponse = function normalizePreAuthzResponse(authz) {
  return {
    f_type: "PreAuthzResponse",
    f_vsn: "1.0.0",
    proposer: (authz || {}).proposer,
    payer: (authz || {}).payer || [],
    authorization: (authz || {}).authorization || []
  };
};

function resolvePreAuthz(authz) {
  var resp = normalizePreAuthzResponse(authz);
  var axs = [];
  if (resp.proposer != null) axs.push(["PROPOSER", resp.proposer]);

  var _iterator = _createForOfIteratorHelper__default["default"](resp.payer || []),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var az = _step.value;
      axs.push(["PAYER", az]);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var _iterator2 = _createForOfIteratorHelper__default["default"](resp.authorization || []),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _az = _step2.value;
      axs.push(["AUTHORIZER", _az]);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var result = axs.map(function (_ref6) {
    var _ref7 = _slicedToArray__default["default"](_ref6, 2),
        role = _ref7[0],
        az = _ref7[1];

    return {
      tempId: [az.identity.address, az.identity.keyId].join("|"),
      addr: az.identity.address,
      keyId: az.identity.keyId,
      signingFunction: function signingFunction(signable) {
        return execService({
          service: az,
          msg: signable
        });
      },
      role: {
        proposer: role === "PROPOSER",
        payer: role === "PAYER",
        authorizer: role === "AUTHORIZER"
      }
    };
  });
  return result;
}

function authorization(_x10) {
  return _authorization.apply(this, arguments);
}

function _authorization() {
  _authorization = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee12(account) {
    return _regeneratorRuntime__default["default"].wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            spawnCurrentUser();
            return _context12.abrupt("return", _objectSpread__default["default"](_objectSpread__default["default"]({}, account), {}, {
              tempId: "CURRENT_USER",
              resolve: function resolve(account, preSignable) {
                return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee11() {
                  var user, authz, preAuthz;
                  return _regeneratorRuntime__default["default"].wrap(function _callee11$(_context11) {
                    while (1) {
                      switch (_context11.prev = _context11.next) {
                        case 0:
                          _context11.next = 2;
                          return authenticate$1({
                            redir: true
                          });

                        case 2:
                          user = _context11.sent;
                          authz = serviceOfType(user.services, "authz");
                          preAuthz = serviceOfType(user.services, "pre-authz");

                          if (!preAuthz) {
                            _context11.next = 11;
                            break;
                          }

                          _context11.t0 = resolvePreAuthz;
                          _context11.next = 9;
                          return execService({
                            service: preAuthz,
                            msg: preSignable
                          });

                        case 9:
                          _context11.t1 = _context11.sent;
                          return _context11.abrupt("return", (0, _context11.t0)(_context11.t1));

                        case 11:
                          if (!authz) {
                            _context11.next = 13;
                            break;
                          }

                          return _context11.abrupt("return", _objectSpread__default["default"](_objectSpread__default["default"]({}, account), {}, {
                            tempId: "CURRENT_USER",
                            resolve: null,
                            addr: utilAddress.sansPrefix(authz.identity.address),
                            keyId: authz.identity.keyId,
                            sequenceNum: null,
                            signature: null,
                            signingFunction: function signingFunction(signable) {
                              return _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee10() {
                                return _regeneratorRuntime__default["default"].wrap(function _callee10$(_context10) {
                                  while (1) {
                                    switch (_context10.prev = _context10.next) {
                                      case 0:
                                        _context10.t0 = normalizeCompositeSignature;
                                        _context10.next = 3;
                                        return execService({
                                          service: authz,
                                          msg: signable,
                                          opts: {
                                            includeOlderJsonRpcCall: true
                                          }
                                        });

                                      case 3:
                                        _context10.t1 = _context10.sent;
                                        return _context10.abrupt("return", (0, _context10.t0)(_context10.t1));

                                      case 5:
                                      case "end":
                                        return _context10.stop();
                                    }
                                  }
                                }, _callee10);
                              }))();
                            }
                          }));

                        case 13:
                          throw new Error("No Authz or PreAuthz Service configured for CURRENT_USER");

                        case 14:
                        case "end":
                          return _context11.stop();
                      }
                    }
                  }, _callee11);
                }))();
              }
            }));

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));
  return _authorization.apply(this, arguments);
}

function subscribe(callback) {
  spawnCurrentUser();
  var EXIT = "@EXIT";
  var self = utilActor.spawn( /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee6(ctx) {
      var letter;
      return _regeneratorRuntime__default["default"].wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              ctx.send(NAME, utilActor.SUBSCRIBE);

            case 1:

              _context6.next = 4;
              return ctx.receive();

            case 4:
              letter = _context6.sent;

              if (!(letter.tag === EXIT)) {
                _context6.next = 8;
                break;
              }

              ctx.send(NAME, utilActor.UNSUBSCRIBE);
              return _context6.abrupt("return");

            case 8:
              callback(letter.data);
              _context6.next = 1;
              break;

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    return function (_x11) {
      return _ref8.apply(this, arguments);
    };
  }());
  return function () {
    return utilActor.send(self, EXIT);
  };
}

function snapshot() {
  spawnCurrentUser();
  return utilActor.send(NAME, SNAPSHOT, null, {
    expectReply: true,
    timeout: 0
  });
}

function resolveArgument() {
  return _resolveArgument.apply(this, arguments);
}

function _resolveArgument() {
  _resolveArgument = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee14() {
    var _yield$authenticate, addr;

    return _regeneratorRuntime__default["default"].wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return authenticate$1();

          case 2:
            _yield$authenticate = _context14.sent;
            addr = _yield$authenticate.addr;
            return _context14.abrupt("return", sdk.arg(utilAddress.withPrefix(addr), t__namespace.Address));

          case 5:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));
  return _resolveArgument.apply(this, arguments);
}

var makeSignable = function makeSignable(msg) {
  utilInvariant.invariant(/^[0-9a-f]+$/i.test(msg), "Message must be a hex string");
  return {
    message: msg
  };
};

function signUserMessage(_x12) {
  return _signUserMessage.apply(this, arguments);
}

function _signUserMessage() {
  _signUserMessage = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee15(msg) {
    var user, signingService, response;
    return _regeneratorRuntime__default["default"].wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            spawnCurrentUser();
            _context15.next = 3;
            return authenticate$1({
              redir: true
            });

          case 3:
            user = _context15.sent;
            signingService = serviceOfType(user.services, "user-signature");
            utilInvariant.invariant(signingService, "Current user must have authorized a signing service.");
            _context15.prev = 6;
            _context15.next = 9;
            return execService({
              service: signingService,
              msg: makeSignable(msg)
            });

          case 9:
            response = _context15.sent;

            if (!Array.isArray(response)) {
              _context15.next = 14;
              break;
            }

            return _context15.abrupt("return", response.map(function (compSigs) {
              return normalizeCompositeSignature(compSigs);
            }));

          case 14:
            return _context15.abrupt("return", [normalizeCompositeSignature(response)]);

          case 15:
            _context15.next = 20;
            break;

          case 17:
            _context15.prev = 17;
            _context15.t0 = _context15["catch"](6);
            return _context15.abrupt("return", _context15.t0);

          case 20:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15, null, [[6, 17]]);
  }));
  return _signUserMessage.apply(this, arguments);
}

var currentUser = function currentUser() {
  return {
    authenticate: authenticate$1,
    unauthenticate: unauthenticate$1,
    authorization: authorization,
    signUserMessage: signUserMessage,
    subscribe: subscribe,
    snapshot: snapshot,
    resolveArgument: resolveArgument
  };
};

currentUser.authenticate = authenticate$1;
currentUser.unauthenticate = unauthenticate$1;
currentUser.authorization = authorization;
currentUser.signUserMessage = signUserMessage;
currentUser.subscribe = subscribe;
currentUser.snapshot = snapshot;
currentUser.resolveArgument = resolveArgument;

var _HANDLERS$2;
var RATE$1 = 2500;
var POLL = "POLL";

var fetchTxStatus = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(transactionId) {
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", sdk.send([sdk.getTransactionStatus(transactionId)]).then(sdk.decode));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fetchTxStatus(_x) {
    return _ref.apply(this, arguments);
  };
}();

var isExpired = function isExpired(tx) {
  return tx.status === 5;
};

var isSealed = function isSealed(tx) {
  return tx.status >= 4;
};

var isExecuted = function isExecuted(tx) {
  return tx.status >= 3;
};

var isFinalized = function isFinalized(tx) {
  return tx.status >= 2;
};

var isPending = function isPending(tx) {
  return tx.status >= 1;
};

var isUnknown = function isUnknown(tx) {
  return tx.status >= 0;
};

var isDiff = function isDiff(cur, next) {
  return JSON.stringify(cur) !== JSON.stringify(next);
};

var HANDLERS$2 = (_HANDLERS$2 = {}, _defineProperty__default["default"](_HANDLERS$2, utilActor.INIT, function () {
  var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ctx) {
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            ctx.sendSelf(POLL);

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$2, utilActor.SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, utilActor.UPDATED, ctx.all());
}), _defineProperty__default["default"](_HANDLERS$2, utilActor.UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);
}), _defineProperty__default["default"](_HANDLERS$2, utilActor.SNAPSHOT, function () {
  var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ctx, letter) {
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            letter.reply(ctx.all());

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$2, POLL, function () {
  var _ref4 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4(ctx) {
    var tx;
    return _regeneratorRuntime__default["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return fetchTxStatus(ctx.self());

          case 3:
            tx = _context4.sent;
            _context4.next = 9;
            break;

          case 6:
            _context4.prev = 6;
            _context4.t0 = _context4["catch"](0);
            return _context4.abrupt("return", ctx.fatalError(_context4.t0));

          case 9:
            if (!isSealed(tx)) setTimeout(function () {
              return ctx.sendSelf(POLL);
            }, RATE$1);
            if (isDiff(ctx.all(), tx)) ctx.broadcast(utilActor.UPDATED, tx);
            ctx.merge(tx);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[0, 6]]);
  }));

  return function (_x5) {
    return _ref4.apply(this, arguments);
  };
}()), _HANDLERS$2);

var scoped = function scoped(transactionId) {
  if (_typeof__default["default"](transactionId) === "object") transactionId = transactionId.transactionId;
  if (transactionId == null) throw new Error("transactionId required");
  return transactionId;
};

var spawnTransaction = function spawnTransaction(transactionId) {
  return utilActor.spawn(HANDLERS$2, scoped(transactionId));
};

function transaction(transactionId) {
  function snapshot() {
    return utilActor.snapshoter(transactionId, spawnTransaction);
  }

  function subscribe(callback) {
    return utilActor.subscriber(scoped(transactionId), spawnTransaction, callback);
  }

  function once(predicate) {
    return function innerOnce() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var suppress = opts.suppress || false;
      return new Promise(function (resolve, reject) {
        var unsub = subscribe(function (txStatus, error) {
          if ((error || txStatus.statusCode) && !suppress) {
            reject(error || txStatus.errorMessage);
            unsub();
          } else if (predicate(txStatus)) {
            resolve(txStatus);
            unsub();
          }
        });
      });
    };
  }

  return {
    snapshot: snapshot,
    subscribe: subscribe,
    onceFinalized: once(isFinalized),
    onceExecuted: once(isExecuted),
    onceSealed: once(isSealed)
  };
}
transaction.isUnknown = isUnknown;
transaction.isPending = isPending;
transaction.isFinalized = isFinalized;
transaction.isExecuted = isExecuted;
transaction.isSealed = isSealed;
transaction.isExpired = isExpired;

function mutate() {
  return _mutate.apply(this, arguments);
}

function _mutate() {
  _mutate = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var opts,
        txid,
        authz,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.prev = 1;
            _context.next = 4;
            return prepMutation(opts);

          case 4:
            _context.next = 6;
            return sdk__namespace.config().get("fcl.authz", currentUser().authorization);

          case 6:
            authz = _context.sent;
            // prettier-ignore
            txid = sdk__namespace.send([sdk__namespace.transaction(opts.cadence), sdk__namespace.args(normalizeArgs(opts.args || [])), opts.limit && isNumber(opts.limit) && sdk__namespace.limit(opts.limit), // opts.proposer > opts.authz > authz
            sdk__namespace.proposer(opts.proposer || opts.authz || authz), // opts.payer > opts.authz > authz
            sdk__namespace.payer(opts.payer || opts.authz || authz), // opts.authorizations > [opts.authz > authz]
            sdk__namespace.authorizations(opts.authorizations || [opts.authz || authz])]).then(sdk__namespace.decode);
            return _context.abrupt("return", txid);

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](1);
            throw _context.t0;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 11]]);
  }));
  return _mutate.apply(this, arguments);
}

function prepMutation(_x) {
  return _prepMutation.apply(this, arguments);
}

function _prepMutation() {
  _prepMutation = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(opts) {
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // prettier-ignore
            utilInvariant.invariant(isRequired(opts), "mutate(opts) -- opts is required"); // prettier-ignore

            utilInvariant.invariant(isObject(opts), "mutate(opts) -- opts must be an object"); // prettier-ignore

            utilInvariant.invariant(isRequired(opts.cadence), "mutate({ cadence }) -- cadence is required"); // prettier-ignore

            utilInvariant.invariant(isString(opts.cadence), "mutate({ cadence }) -- cadence must be a string"); // prettier-ignore

            _context2.t0 = utilInvariant.invariant;
            _context2.next = 7;
            return sdk__namespace.config.get("accessNode.api");

          case 7:
            _context2.t1 = _context2.sent;
            _context2.t2 = "Required value for \"accessNode.api\" not defined in config. See: ".concat("https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration");
            (0, _context2.t0)(_context2.t1, _context2.t2);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _prepMutation.apply(this, arguments);
}

var onMessageFromFCL = function onMessageFromFCL(messageType) {
  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

  var buildData = function buildData(data) {
    var _data$body;

    if (data.deprecated) console.warn("DEPRECATION NOTICE", data.deprecated.message);
    data === null || data === void 0 ? true : (_data$body = data.body) === null || _data$body === void 0 ? true : delete _data$body.interaction;
    return data;
  };

  var internal = function internal(e) {
    var data = e.data;
    if (_typeof__default["default"](data) !== "object") return;
    if (_typeof__default["default"](data) == null) return;
    if (data.type !== messageType) return;
    cb(buildData(data));
  };

  window.addEventListener("message", internal);
  return function () {
    return window.removeEventListener("message", internal);
  };
};

var sendMsgToFCL = function sendMsgToFCL(type) {
  var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (window.location !== window.parent.location) {
    window.parent.postMessage(_objectSpread__default["default"](_objectSpread__default["default"]({}, msg), {}, {
      type: type
    }), "*");
  } else if (window.opener) {
    window.opener.postMessage(_objectSpread__default["default"](_objectSpread__default["default"]({}, msg), {}, {
      type: type
    }), "*");
  } else {
    throw new Error("Unable to communicate with parent FCL instance");
  }
};
var ready = function ready(cb) {
  onMessageFromFCL("FCL:VIEW:READY:RESPONSE", cb);
  sendMsgToFCL("FCL:VIEW:READY");
};
var close = function close() {
  sendMsgToFCL("FCL:VIEW:CLOSE");
};
var approve = function approve(data) {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "APPROVED",
    reason: null,
    data: data
  });
};
var decline = function decline(reason) {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "DECLINED",
    reason: reason,
    data: null
  });
};
var redirect = function redirect(data) {
  sendMsgToFCL("FCL:VIEW:RESPONSE", {
    f_type: "PollingResponse",
    f_vsn: "1.0.0",
    status: "REDIRECT",
    reason: null,
    data: data
  });
};

function CompositeSignature(addr, keyId, signature) {
  this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type;
  this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn;
  this.addr = utilAddress.withPrefix(addr);
  this.keyId = Number(keyId);
  this.signature = signature;
}

var rightPaddedHexBuffer = function rightPaddedHexBuffer(value, pad) {
  return rlp.Buffer.from(value.padEnd(pad * 2, "0"), "hex");
};

var leftPaddedHexBuffer = function leftPaddedHexBuffer(value, pad) {
  return rlp.Buffer.from(value.padStart(pad * 2, "0"), "hex");
};

var addressBuffer = function addressBuffer(addr) {
  return leftPaddedHexBuffer(addr, 8);
};

var nonceBuffer = function nonceBuffer(nonce) {
  return rlp.Buffer.from(nonce, "hex");
};

var encodeAccountProof = function encodeAccountProof(_ref) {
  var address = _ref.address,
      nonce = _ref.nonce,
      appIdentifier = _ref.appIdentifier;
  var includeDomainTag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  utilInvariant.invariant(address, "Encode Message For Provable Authn Error: address must be defined");
  utilInvariant.invariant(nonce, "Encode Message For Provable Authn Error: nonce must be defined");
  utilInvariant.invariant(appIdentifier, "Encode Message For Provable Authn Error: appIdentifier must be defined");
  utilInvariant.invariant(nonce.length >= 64, "Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes");
  var ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(rlp.Buffer.from("FCL-ACCOUNT-PROOF-V0.0").toString("hex"), 32);

  if (includeDomainTag) {
    return rlp.Buffer.concat([ACCOUNT_PROOF_DOMAIN_TAG, rlp.encode([appIdentifier, addressBuffer(utilAddress.sansPrefix(address)), nonceBuffer(nonce)])]).toString("hex");
  }

  return rlp.encode([appIdentifier, addressBuffer(utilAddress.sansPrefix(address)), nonceBuffer(nonce)]).toString("hex");
};

function injectExtService(service) {
  if (service.type === "authn" && service.endpoint != null) {
    if (!Array.isArray(window.fcl_extensions)) {
      window.fcl_extensions = [];
    }

    window.fcl_extensions.push(service);
  } else {
    console.warn("Authn service is required");
  }
}

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sendMsgToFCL: sendMsgToFCL,
  ready: ready,
  close: close,
  approve: approve,
  decline: decline,
  redirect: redirect,
  onMessageFromFCL: onMessageFromFCL,
  encodeMessageFromSignable: sdk.encodeMessageFromSignable,
  CompositeSignature: CompositeSignature,
  encodeAccountProof: encodeAccountProof,
  injectExtService: injectExtService
});

var ACCOUNT_PROOF = "ACCOUNT_PROOF";
var USER_SIGNATURE = "USER_SIGNATURE";
var validateArgs = function validateArgs(args) {
  if (args.appIdentifier) {
    var appIdentifier = args.appIdentifier,
        address = args.address,
        nonce = args.nonce,
        signatures = args.signatures;
    utilInvariant.invariant(isString(appIdentifier), "verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string");
    utilInvariant.invariant(isString(address) && utilAddress.sansPrefix(address).length === 16, "verifyAccountProof({ address }) -- address must be a valid address");
    utilInvariant.invariant(/^[0-9a-f]+$/i.test(nonce), "nonce must be a hex string");
    utilInvariant.invariant(Array.isArray(signatures) && signatures.every(function (sig, i, arr) {
      return sig.f_type === "CompositeSignature";
    }), "Must include an Array of CompositeSignatures to verify");
    utilInvariant.invariant(signatures.map(function (cs) {
      return cs.addr;
    }).every(function (addr, i, arr) {
      return addr === arr[0];
    }), "User signatures to be verified must be from a single account address");
    return true;
  } else {
    var message = args.message,
        _address = args.address,
        compSigs = args.compSigs;
    utilInvariant.invariant(/^[0-9a-f]+$/i.test(message), "Signed message must be a hex string");
    utilInvariant.invariant(isString(_address) && utilAddress.sansPrefix(_address).length === 16, "verifyUserSignatures({ address }) -- address must be a valid address");
    utilInvariant.invariant(Array.isArray(compSigs) && compSigs.every(function (sig, i, arr) {
      return sig.f_type === "CompositeSignature";
    }), "Must include an Array of CompositeSignatures to verify");
    utilInvariant.invariant(compSigs.map(function (cs) {
      return cs.addr;
    }).every(function (addr, i, arr) {
      return addr === arr[0];
    }), "User signatures to be verified must be from a single account address");
    return true;
  }
};

var getVerifySignaturesScript = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(sig, opts) {
    var verifyFunction, network, fclCryptoContract;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            verifyFunction = sig === "ACCOUNT_PROOF" ? "verifyAccountProofSignatures" : "verifyUserSignatures";
            _context.next = 3;
            return config.config.get("flow.network");

          case 3:
            network = _context.sent;

            if (network) {
              _context.next = 9;
              break;
            }

            _context.next = 7;
            return config.config.get("env");

          case 7:
            network = _context.sent;
            if (network) utilLogger.log.deprecate({
              pkg: "FCL",
              subject: 'Using the "env" configuration key for specifying the flow network',
              message: 'Please use "flow.network" instead.',
              transition: "https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key"
            });

          case 9:
            utilInvariant.invariant(opts.fclCryptoContract || network === "testnet" || network === "mainnet", "${verifyFunction}({ fclCryptoContract }) -- config.flow.network must be specified (testnet || mainnet) or contract address provided via opts.fclCryptoContract");

            if (opts.fclCryptoContract) {
              fclCryptoContract = opts.fclCryptoContract;
            } else {
              fclCryptoContract = network === "testnet" ? "0x74daa6f9c7ef24b1" : "0xb4b82a1c9d21d284";
            }

            return _context.abrupt("return", "\n      import FCLCrypto from ".concat(fclCryptoContract, "\n\n      pub fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.").concat(verifyFunction, "(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    "));

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getVerifySignaturesScript(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Verify a valid account proof signature or signatures for an account on Flow.
 *
 * @param {string} appIdentifier - A message string in hexadecimal format
 * @param {Object} accountProofData - An object consisting of address, nonce, and signatures
 * @param {string} accountProofData.address - A Flow account address
 * @param {string} accountProofData.nonce - A random string in hexadecimal format (minimum 32 bytes in total, i.e 64 hex characters)
 * @param {Object[]} accountProofData.signatures - An array of composite signatures to verify
 * @param {Object} [opts={}] - Options object
 * @param {string} opts.fclCryptoContract - An optional override Flow account address where the FCLCrypto contract is deployed
 * @return {bool}
 *
 * @example
 *
 *  const accountProofData = {
 *   address: "0x123",
 *   nonce: "F0123"
 *   signatures: [{f_type: "CompositeSignature", f_vsn: "1.0.0", addr: "0x123", keyId: 0, signature: "abc123"}],
 *  }
 *
 *  const isValid = await fcl.AppUtils.verifyAccountProof(
 *    "AwesomeAppId",
 *    accountProofData,
 *    {fclCryptoContract}
 *  )
 */


function verifyAccountProof(_x3, _x4) {
  return _verifyAccountProof.apply(this, arguments);
}
/**
 * Verify a valid signature/s for an account on Flow.
 *
 * @param {string} msg - A message string in hexadecimal format
 * @param {Array} compSigs - An array of Composite Signatures
 * @param {string} compSigs[].addr - The account address
 * @param {number} compSigs[].keyId - The account keyId
 * @param {string} compSigs[].signature - The signature to verify
 * @param {Object} [opts={}] - Options object
 * @param {string} opts.fclCryptoContract - An optional override of Flow account address where the FCLCrypto contract is deployed
 * @return {bool}
 *
 * @example
 *
 *  const isValid = await fcl.AppUtils.verifyUserSignatures(
 *    Buffer.from('FOO').toString("hex"),
 *    [{f_type: "CompositeSignature", f_vsn: "1.0.0", addr: "0x123", keyId: 0, signature: "abc123"}],
 *    {fclCryptoContract}
 *  )
 */

function _verifyAccountProof() {
  _verifyAccountProof = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(appIdentifier, _ref2) {
    var address,
        nonce,
        signatures,
        opts,
        message,
        signaturesArr,
        keyIndices,
        _iterator,
        _step,
        el,
        _args2 = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            address = _ref2.address, nonce = _ref2.nonce, signatures = _ref2.signatures;
            opts = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            validateArgs({
              appIdentifier: appIdentifier,
              address: address,
              nonce: nonce,
              signatures: signatures
            });
            message = encodeAccountProof({
              address: address,
              nonce: nonce,
              appIdentifier: appIdentifier
            }, false);
            signaturesArr = [];
            keyIndices = [];
            _iterator = _createForOfIteratorHelper__default["default"](signatures);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                el = _step.value;
                signaturesArr.push(el.signature);
                keyIndices.push(el.keyId.toString());
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            _context2.t0 = query;
            _context2.next = 11;
            return getVerifySignaturesScript(ACCOUNT_PROOF, opts);

          case 11:
            _context2.t1 = _context2.sent;

            _context2.t2 = function args(arg, t) {
              return [arg(utilAddress.withPrefix(address), t.Address), arg(message, t.String), arg(keyIndices, t.Array([t.Int])), arg(signaturesArr, t.Array([t.String]))];
            };

            _context2.t3 = {
              cadence: _context2.t1,
              args: _context2.t2
            };
            return _context2.abrupt("return", (0, _context2.t0)(_context2.t3));

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _verifyAccountProof.apply(this, arguments);
}

function verifyUserSignatures$1(_x5, _x6) {
  return _verifyUserSignatures.apply(this, arguments);
}

function _verifyUserSignatures() {
  _verifyUserSignatures = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(message, compSigs) {
    var opts,
        address,
        signaturesArr,
        keyIndices,
        _iterator2,
        _step2,
        el,
        _args3 = arguments;

    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            address = utilAddress.withPrefix(compSigs[0].addr);
            validateArgs({
              message: message,
              address: address,
              compSigs: compSigs
            });
            signaturesArr = [];
            keyIndices = [];
            _iterator2 = _createForOfIteratorHelper__default["default"](compSigs);

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                el = _step2.value;
                signaturesArr.push(el.signature);
                keyIndices.push(el.keyId.toString());
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            _context3.t0 = query;
            _context3.next = 10;
            return getVerifySignaturesScript(USER_SIGNATURE, opts);

          case 10:
            _context3.t1 = _context3.sent;

            _context3.t2 = function args(arg, t) {
              return [arg(address, t.Address), arg(message, t.String), arg(keyIndices, t.Array([t.Int])), arg(signaturesArr, t.Array([t.String]))];
            };

            _context3.t3 = {
              cadence: _context3.t1,
              args: _context3.t2
            };
            return _context3.abrupt("return", (0, _context3.t0)(_context3.t3));

          case 14:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _verifyUserSignatures.apply(this, arguments);
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  verifyAccountProof: verifyAccountProof,
  verifyUserSignatures: verifyUserSignatures$1
});

/**
 * Verify a valid signature/s for an account on Flow.
 *
 * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead
 *
 */

var verifyUserSignatures = utilLogger.log.deprecate({
  pkg: "FCL",
  subject: "fcl.verifyUserSignatures()",
  message: "Please use fcl.AppUtils.verifyUserSignatures()",
  callback: function verifyUserSignatures(message, compSigs) {
    return verifyUserSignatures$1(message, compSigs);
  }
});

var serialize = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
    var args,
        opts,
        resolveFunction,
        _args = arguments;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            args = _args.length > 0 && _args[0] !== undefined ? _args[0] : [];
            opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            _context.next = 4;
            return sdk.config.first(["sdk.resolve"], opts.resolve || sdk.resolve);

          case 4:
            resolveFunction = _context.sent;

            if (!Array.isArray(args)) {
              _context.next = 9;
              break;
            }

            _context.next = 8;
            return sdk.pipe(sdk.interaction(), args);

          case 8:
            args = _context.sent;

          case 9:
            _context.t0 = JSON;
            _context.t1 = sdk.createSignableVoucher;
            _context.next = 13;
            return resolveFunction(args);

          case 13:
            _context.t2 = _context.sent;
            _context.t3 = (0, _context.t1)(_context.t2);
            return _context.abrupt("return", _context.t0.stringify.call(_context.t0, _context.t3, null, 2));

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function serialize() {
    return _ref.apply(this, arguments);
  };
}();

var _HANDLERS$1;
var RATE = 10000;
var UPDATED = "UPDATED";
var TICK = "TICK";
var HIGH_WATER_MARK = "hwm";

var scheduleTick = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(ctx) {
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = setTimeout;

            _context.t1 = function () {
              return ctx.sendSelf(TICK);
            };

            _context.next = 4;
            return sdk.config().get("fcl.eventPollRate", RATE);

          case 4:
            _context.t2 = _context.sent;
            return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function scheduleTick(_x) {
    return _ref.apply(this, arguments);
  };
}();

var HANDLERS$1 = (_HANDLERS$1 = {}, _defineProperty__default["default"](_HANDLERS$1, TICK, function () {
  var _ref2 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ctx) {
    var hwm, next, data, _iterator, _step, d;

    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (ctx.hasSubs()) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return");

          case 2:
            hwm = ctx.get(HIGH_WATER_MARK);

            if (!(hwm == null)) {
              _context2.next = 18;
              break;
            }

            _context2.t0 = ctx;
            _context2.t1 = HIGH_WATER_MARK;
            _context2.next = 8;
            return sdk.block();

          case 8:
            _context2.t2 = _context2.sent;

            _context2.t0.put.call(_context2.t0, _context2.t1, _context2.t2);

            _context2.t3 = ctx;
            _context2.t4 = TICK;
            _context2.next = 14;
            return scheduleTick(ctx);

          case 14:
            _context2.t5 = _context2.sent;

            _context2.t3.put.call(_context2.t3, _context2.t4, _context2.t5);

            _context2.next = 34;
            break;

          case 18:
            _context2.next = 20;
            return sdk.block();

          case 20:
            next = _context2.sent;
            ctx.put(HIGH_WATER_MARK, next);

            if (!(hwm.height < next.height)) {
              _context2.next = 28;
              break;
            }

            _context2.next = 25;
            return sdk.send([sdk.getEventsAtBlockHeightRange(ctx.self(), hwm.height + 1, next.height)]).then(sdk.decode);

          case 25:
            data = _context2.sent;
            _iterator = _createForOfIteratorHelper__default["default"](data);

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                d = _step.value;
                ctx.broadcast(UPDATED, d.data);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

          case 28:
            _context2.t6 = ctx;
            _context2.t7 = TICK;
            _context2.next = 32;
            return scheduleTick(ctx);

          case 32:
            _context2.t8 = _context2.sent;

            _context2.t6.put.call(_context2.t6, _context2.t7, _context2.t8);

          case 34:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$1, utilActor.SUBSCRIBE, function () {
  var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ctx, letter) {
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (ctx.hasSubs()) {
              _context3.next = 7;
              break;
            }

            _context3.t0 = ctx;
            _context3.t1 = TICK;
            _context3.next = 5;
            return scheduleTick(ctx);

          case 5:
            _context3.t2 = _context3.sent;

            _context3.t0.put.call(_context3.t0, _context3.t1, _context3.t2);

          case 7:
            ctx.subscribe(letter.from);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS$1, utilActor.UNSUBSCRIBE, function (ctx, letter) {
  ctx.unsubscribe(letter.from);

  if (!ctx.hasSubs()) {
    clearTimeout(ctx.get(TICK));
    ctx["delete"](TICK);
    ctx["delete"](HIGH_WATER_MARK);
  }
}), _HANDLERS$1);

var spawnEvents = function spawnEvents(key) {
  return utilActor.spawn(HANDLERS$1, key);
};

function events(key) {
  return {
    subscribe: function subscribe(callback) {
      return utilActor.subscriber(key, spawnEvents, callback);
    }
  };
}

var isWindow = function isWindow() {
  return typeof window !== "undefined";
};

function getServices(_x) {
  return _getServices.apply(this, arguments);
}

function _getServices() {
  _getServices = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(_ref) {
    var _window, _window$navigator;

    var types, endpoint, include, url;
    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            types = _ref.types;
            _context.next = 3;
            return config.config.get("discovery.authn.endpoint");

          case 3:
            endpoint = _context.sent;
            utilInvariant.invariant(Boolean(endpoint), "\"discovery.authn.endpoint\" in config must be defined.");
            _context.next = 7;
            return config.config.get("discovery.authn.include", []);

          case 7:
            include = _context.sent;
            url = new URL(endpoint);
            return _context.abrupt("return", fetch(url, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                type: types,
                fclVersion: VERSION,
                include: include,
                extensions: isWindow() ? window.fcl_extensions || [] : [],
                userAgent: (_window = window) === null || _window === void 0 ? void 0 : (_window$navigator = _window.navigator) === null || _window$navigator === void 0 ? void 0 : _window$navigator.userAgent
              })
            }).then(function (d) {
              return d.json();
            }));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getServices.apply(this, arguments);
}

var _HANDLERS;
var SERVICE_ACTOR_KEYS = {
  AUTHN: "authn",
  RESULTS: "results",
  SNAPSHOT: "SNAPSHOT",
  UPDATED: "UPDATED",
  UPDATE_RESULTS: "UPDATE_RESULTS"
};

var warn = function warn(fact, msg) {
  if (fact) {
    console.warn("\n      %cFCL Warning\n      ============================\n      ".concat(msg, "\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      "), "font-weight:bold;font-family:monospace;");
  }
};

var HANDLERS = (_HANDLERS = {}, _defineProperty__default["default"](_HANDLERS, utilActor.INIT, function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2(ctx) {
    return _regeneratorRuntime__default["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            warn(typeof window === "undefined", '"fcl.discovery" is only available in the browser.'); // If you call this before the window is loaded extensions will not be set yet

            window.onload = /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
              var services;
              return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.prev = 0;
                      _context.next = 3;
                      return getServices({
                        types: [SERVICE_ACTOR_KEYS.AUTHN]
                      });

                    case 3:
                      services = _context.sent;
                      utilActor.send(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {
                        results: services
                      });
                      _context.next = 10;
                      break;

                    case 7:
                      _context.prev = 7;
                      _context.t0 = _context["catch"](0);
                      console.log("Error fetching Discovery API services.");

                    case 10:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, null, [[0, 7]]);
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}()), _defineProperty__default["default"](_HANDLERS, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, function (ctx, _letter, data) {
  ctx.merge(data);
  ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, utilActor.SUBSCRIBE, function (ctx, letter) {
  ctx.subscribe(letter.from);
  ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, _objectSpread__default["default"]({}, ctx.all()));
}), _defineProperty__default["default"](_HANDLERS, utilActor.UNSUBSCRIBE, function (ctx, letter) {
  return ctx.unsubscribe(letter.from);
}), _defineProperty__default["default"](_HANDLERS, SERVICE_ACTOR_KEYS.SNAPSHOT, function () {
  var _ref3 = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3(ctx, letter) {
    return _regeneratorRuntime__default["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", letter.reply(_objectSpread__default["default"]({}, ctx.all())));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x2, _x3) {
    return _ref3.apply(this, arguments);
  };
}()), _HANDLERS);

var spawnProviders = function spawnProviders() {
  return utilActor.spawn(HANDLERS, SERVICE_ACTOR_KEYS.AUTHN);
};

var authn = {
  subscribe: function subscribe(cb) {
    return utilActor.subscriber(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders, cb);
  },
  snapshot: function snapshot() {
    return utilActor.snapshoter(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders);
  }
};

var discovery = {
  authn: authn
};

var authenticate = function authenticate() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var unauthenticate = function unauthenticate() {
  return currentUser().unauthenticate();
};
var reauthenticate = function reauthenticate() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  currentUser().unauthenticate();
  return currentUser().authenticate(opts);
};
var signUp = function signUp() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var logIn = function logIn() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return currentUser().authenticate(opts);
};
var authz = currentUser().authorization;
var t = t__namespace;

Object.defineProperty(exports, 'config', {
  enumerable: true,
  get: function () { return config.config; }
});
Object.defineProperty(exports, 'TestUtils', {
  enumerable: true,
  get: function () { return sdk.TestUtils; }
});
Object.defineProperty(exports, 'account', {
  enumerable: true,
  get: function () { return sdk.account; }
});
Object.defineProperty(exports, 'arg', {
  enumerable: true,
  get: function () { return sdk.arg; }
});
Object.defineProperty(exports, 'args', {
  enumerable: true,
  get: function () { return sdk.args; }
});
Object.defineProperty(exports, 'atBlockHeight', {
  enumerable: true,
  get: function () { return sdk.atBlockHeight; }
});
Object.defineProperty(exports, 'atBlockId', {
  enumerable: true,
  get: function () { return sdk.atBlockId; }
});
Object.defineProperty(exports, 'authorization', {
  enumerable: true,
  get: function () { return sdk.authorization; }
});
Object.defineProperty(exports, 'authorizations', {
  enumerable: true,
  get: function () { return sdk.authorizations; }
});
Object.defineProperty(exports, 'block', {
  enumerable: true,
  get: function () { return sdk.block; }
});
Object.defineProperty(exports, 'build', {
  enumerable: true,
  get: function () { return sdk.build; }
});
Object.defineProperty(exports, 'createSignableVoucher', {
  enumerable: true,
  get: function () { return sdk.createSignableVoucher; }
});
Object.defineProperty(exports, 'decode', {
  enumerable: true,
  get: function () { return sdk.decode; }
});
Object.defineProperty(exports, 'getAccount', {
  enumerable: true,
  get: function () { return sdk.getAccount; }
});
Object.defineProperty(exports, 'getBlock', {
  enumerable: true,
  get: function () { return sdk.getBlock; }
});
Object.defineProperty(exports, 'getBlockHeader', {
  enumerable: true,
  get: function () { return sdk.getBlockHeader; }
});
Object.defineProperty(exports, 'getCollection', {
  enumerable: true,
  get: function () { return sdk.getCollection; }
});
Object.defineProperty(exports, 'getEvents', {
  enumerable: true,
  get: function () { return sdk.getEvents; }
});
Object.defineProperty(exports, 'getEventsAtBlockHeightRange', {
  enumerable: true,
  get: function () { return sdk.getEventsAtBlockHeightRange; }
});
Object.defineProperty(exports, 'getEventsAtBlockIds', {
  enumerable: true,
  get: function () { return sdk.getEventsAtBlockIds; }
});
Object.defineProperty(exports, 'getTransaction', {
  enumerable: true,
  get: function () { return sdk.getTransaction; }
});
Object.defineProperty(exports, 'getTransactionStatus', {
  enumerable: true,
  get: function () { return sdk.getTransactionStatus; }
});
Object.defineProperty(exports, 'invariant', {
  enumerable: true,
  get: function () { return sdk.invariant; }
});
Object.defineProperty(exports, 'isBad', {
  enumerable: true,
  get: function () { return sdk.isBad; }
});
Object.defineProperty(exports, 'isOk', {
  enumerable: true,
  get: function () { return sdk.isOk; }
});
Object.defineProperty(exports, 'limit', {
  enumerable: true,
  get: function () { return sdk.limit; }
});
Object.defineProperty(exports, 'param', {
  enumerable: true,
  get: function () { return sdk.param; }
});
Object.defineProperty(exports, 'params', {
  enumerable: true,
  get: function () { return sdk.params; }
});
Object.defineProperty(exports, 'payer', {
  enumerable: true,
  get: function () { return sdk.payer; }
});
Object.defineProperty(exports, 'ping', {
  enumerable: true,
  get: function () { return sdk.ping; }
});
Object.defineProperty(exports, 'pipe', {
  enumerable: true,
  get: function () { return sdk.pipe; }
});
Object.defineProperty(exports, 'proposer', {
  enumerable: true,
  get: function () { return sdk.proposer; }
});
Object.defineProperty(exports, 'ref', {
  enumerable: true,
  get: function () { return sdk.ref; }
});
Object.defineProperty(exports, 'script', {
  enumerable: true,
  get: function () { return sdk.script; }
});
Object.defineProperty(exports, 'send', {
  enumerable: true,
  get: function () { return sdk.send; }
});
Object.defineProperty(exports, 'transaction', {
  enumerable: true,
  get: function () { return sdk.transaction; }
});
Object.defineProperty(exports, 'validator', {
  enumerable: true,
  get: function () { return sdk.validator; }
});
Object.defineProperty(exports, 'voucherIntercept', {
  enumerable: true,
  get: function () { return sdk.voucherIntercept; }
});
Object.defineProperty(exports, 'voucherToTxId', {
  enumerable: true,
  get: function () { return sdk.voucherToTxId; }
});
Object.defineProperty(exports, 'why', {
  enumerable: true,
  get: function () { return sdk.why; }
});
Object.defineProperty(exports, 'display', {
  enumerable: true,
  get: function () { return utilAddress.display; }
});
Object.defineProperty(exports, 'sansPrefix', {
  enumerable: true,
  get: function () { return utilAddress.sansPrefix; }
});
Object.defineProperty(exports, 'withPrefix', {
  enumerable: true,
  get: function () { return utilAddress.withPrefix; }
});
Object.defineProperty(exports, 'cadence', {
  enumerable: true,
  get: function () { return utilTemplate.template; }
});
Object.defineProperty(exports, 'cdc', {
  enumerable: true,
  get: function () { return utilTemplate.template; }
});
exports.AppUtils = index;
exports.VERSION = VERSION;
exports.WalletUtils = index$1;
exports.authenticate = authenticate;
exports.authz = authz;
exports.currentUser = currentUser;
exports.discovery = discovery;
exports.events = events;
exports.logIn = logIn;
exports.mutate = mutate;
exports.query = query;
exports.reauthenticate = reauthenticate;
exports.serialize = serialize;
exports.signUp = signUp;
exports.t = t;
exports.tx = transaction;
exports.unauthenticate = unauthenticate;
exports.verifyUserSignatures = verifyUserSignatures;
//# sourceMappingURL=fcl.js.map
